ALIGNMENT_FILE <- "~/Downloads/gisaid_cov2020_sequences_minlength_okdate.masked"
ALIGNMENT_FILE <- "~/Downloads/italy_2020-04-01.masked"

ALIGNMENT_FILE <- "~/Downloads/masked_full_name_2020-04-01.fasta"

OUTDIR <- "~/PHD/_ncov/Primers_secondtry/"
WINDOW_SIZE <- 120 #(120 virus window, 10 bp barcode, and 20 for extra room)
### RNAP - positive control, positive control2-GADPH (need to design still),
# WHO - 3 sites, E, N, and RDRP genes, and the CDC- N1, N2, N3, twist positive controls 3
96-11
NUMBER_REGIONS <- 10
OUTFILE <- "~/PHD/_ncov/alignment_phylodynamics.fasta"
require(ape)
require(ggplot2)


ALIGNMENT_FILE <- "~/Downloads/gisaid_cov2020_sequences_minlength_okdate.masked"

alignment <- ape::read.FASTA(file = ALIGNMENT_FILE, type = "DNA")

alignment_matrix <- as.data.frame(as.character(as.matrix(alignment)))
n_sites <- ncol(alignment_matrix)

get_n_divergent <- function(sequence) {
  seq_called_bases <- sequence[sequence %in% c('a', 'c', 't', 'g')]
  consensus_base <- get_mode(seq_called_bases)
  n_divergent_bases <- sum(!((seq_called_bases == consensus_base)))
  return(n_divergent_bases)
}

get_mode <- function(v) {
  uniqv <- unique(v)
  uniqv[which.max(tabulate(match(v, uniqv)))]
}

n_divergent_bases <- apply(
  X = alignment_matrix,
  MARGIN = 2,
  FUN = get_n_divergent)

avg_divergence <- rep(NA, n_sites - WINDOW_SIZE)
for (i in 1:(n_sites - WINDOW_SIZE)) {
  avg_divergence[i] <- mean(n_divergent_bases[i:(i + WINDOW_SIZE)])
}

avg_divergence_by_window_start <- data.frame(
  "starting_site_for_window" = 1:(n_sites - WINDOW_SIZE),
  "avg_n_divergent_bases_in_window" = avg_divergence)

temp <- avg_divergence_by_window_start
starting_sites <- c()
selected_sites <- c()
i <- 0
while(i < NUMBER_REGIONS) {
  temp <- temp[order(temp$avg_n_divergent_bases_in_window, decreasing = T), ]
  new_starting_site <- temp[1, "starting_site_for_window"]
  starting_sites <- c(starting_sites, new_starting_site)
  selected_sites <- c(selected_sites, new_starting_site:(new_starting_site + WINDOW_SIZE-1))
  no_longer_valid_start_sites <- (new_starting_site - WINDOW_SIZE):(new_starting_site + WINDOW_SIZE-1)
  temp <- temp[!(temp$starting_site_for_window %in% no_longer_valid_start_sites), ]
  i <- i + 1
}
#
# starting_sites_window115_sel30 <- starting_sites
# selected_sites_window115_sel30 <- selected_sites
# starting_sites_window115 <- starting_sites
# selected_sites_window115 <- selected_sites
# length(intersect(starting_sites_window115_sel30,starting_sites_window115))
#
# starting_sites_window150 <- starting_sites
# selected_sites_window150 <- selected_sites
#
# length(intersect(starting_sites_window115,starting_sites_window150))
# sort(starting_sites_window115)
# sort(starting_sites_window150)
#
# alex_sites <- data.frame(
#   "Protein" = c("ORF1A",	"ORF1A",	"ORF1A",	"S",	"S",	"M",	"ORF1A",
#                 "ORF1B",	"ORF1B",	"ORF1B",	"S",	"S",	"M",	"ORF8", "ORF14"),
#   "Genome Site" = c(3134,	6254,	11081,	21710,	24389,	26529,	11081,	14407,
#                     17746,	17857,	23402,	26143,	27045,	28143,	28881))
# alex_sites$covered <- alex_sites$Genome.Site %in% selected_sites
#
# print("Suggested starting sites:")
# print(paste0(sort(starting_sites), collapse = ", "))

table_to_send <- avg_divergence_by_window_start[
  avg_divergence_by_window_start$starting_site_for_window %in% starting_sites, ]
colnames(table_to_send) <- c("starting_site_for_150bp_window",
                             "mean_snps_per_site_in_window")
table_to_send <- table_to_send[order(table_to_send$starting_site_for_150bp_window), ]
table_to_send$mean_snps_per_site_in_window <- round(
  table_to_send$mean_snps_per_site_in_window, 2)
write.table(
  x = table_to_send,
  file = paste(OUTDIR, "Round_two.txt", sep = "/"),
  row.names = F,
  quote = F)
plot1 <- ggplot(
  data = avg_divergence_by_window_start,
  aes(x = starting_site_for_window, y = avg_n_divergent_bases_in_window)) +
  geom_point() +
  geom_point(
    data = avg_divergence_by_window_start[
      avg_divergence_by_window_start$starting_site_for_window %in%
        (selected_sites), ]) +
  theme_bw() + theme(text = element_text(size=20),legend.position = "none") + ylab("Sequence divergence") + xlab("Viral gneome site")
show(plot1)
pdf("~/PHD/_ncov/figures/Selected_optimized_115bp_80testsites_nocolor.pdf",height=6,width=10)
plot1
dev.off()

plot2 <- ggplot(
  data = avg_divergence_by_window_start,
  aes(x = starting_site_for_window, y = avg_n_divergent_bases_in_window)) +
  geom_point() +
  geom_point(
    data = avg_divergence_by_window_start[
      avg_divergence_by_window_start$starting_site_for_window %in%
        union(selected_sites,selected_sites_window150), ],
    aes(color = "Selected sites")) +
  theme_bw() + theme(text = element_text(size=20),legend.position = "none") + ylab("Sequence divergence") + xlab("Viral gneome site")
show(plot2)
pdf("~/PHD/_ncov/figures/Selected_optimized_115bp_80testsites_withsome_150optimized.pdf",height=6,width=10)
plot2
dev.off()

plot3 <- ggplot(
  data = avg_divergence_by_window_start,
  aes(x = starting_site_for_window, y = avg_n_divergent_bases_in_window)) +
  geom_point() +
  geom_point(
    data = avg_divergence_by_window_start[
      avg_divergence_by_window_start$starting_site_for_window %in%
        (selected_sites), ],
    aes(color = "Selected sites")) +
  theme_bw() + theme(text = element_text(size=20),legend.position = "none") + ylab("Sequence divergence") + xlab("Viral genome site")
show(plot3)
pdf("~/PHD/_ncov/Primers_secondtry/Selected_optimized_115bp_60testsites.pdf",height=6,width=10)
plot3
dev.off()

plot4 <- ggplot(
  data = avg_divergence_by_window_start,
  aes(x = starting_site_for_window, y = avg_n_divergent_bases_in_window)) +
  geom_point() +
  geom_point(
    data = avg_divergence_by_window_start[
      avg_divergence_by_window_start$starting_site_for_window %in%
        (unlist(span_nucl)), ],
    aes(color = "Selected sites")) +
  theme_bw() + theme(text = element_text(size=20),legend.position = "none") + ylab("Sequence divergence") + xlab("Viral gneome site")
show(plot4)
pdf("~/PHD/_ncov/figures/what_we_ordered.pdf",height=6,width=10)
plot4
dev.off()


mytable <- read.table("~/Downloads/mycsv.csv",header = T,stringsAsFactors = F)
start <- as.list(mytable$column1)
end <- as.list(mytable$column2)
windows <- list()
for(i in 1:length(start))windows[[i]] <- start[[i]]:end[[i]]
selected_sites <- unlist(windows)
#######
window1_start <- 115
window1_end <- 230
window2_start <- 500
window2_end <- 620
start <- list()
start[[1]] <- 115
start[[2]] <- 500
end <- list()
end[[1]] <- 230
end[[2]] <- 620
windows <- list()
for(i in 1:length(start))windows[[i]] <- start[[i]]:end[[i]]
selected_sites <- unlist(windows)
selected_sites <- c(window1_start:window1_end)
# Filter alignment to these starting sites
alignment_matrix_filtered <- alignment_matrix[, selected_sites]
alignment_filtered <- as.DNAbin(as.matrix(alignment_matrix_filtered))
alignment_unfiltered <- as.DNAbin(as.matrix(alignment_matrix))
library(phangorn)
library(phytools)
filt_nj <- reroot(nj(alignment_filtered),node.number = 193)
unfilt_nj <- reroot(nj(alignment_unfiltered),node.number = 193)
filt_nj_noroot <- (nj(alignment_filtered))
unfilt_nj_noroot <- (nj(alignment_unfiltered))

plot.phylo(unfilt_nj,show.tip.label = F,use.edge.length = F,main="Unfiltered")
plot.phylo(filt_nj,show.tip.label = F,use.edge.length = F,main="Filtered")
plot.phylo(filt_nj_noroot,show.tip.label = F,use.edge.length = F)
plot.phylo(unfilt_nj_noroot,show.tip.label = F,use.edge.length = F)

sampling_ind <- sample(1:nrow(alignment_filtered),size = 50,replace = F)
sampling_ind <- c(sampling_ind,193)
filt_nj_sampled <- reroot(nj(alignment_filtered[sampling_ind,]),node.number = 51)
unfilt_nj_sample <- reroot(nj(alignment_unfiltered[sampling_ind,]),node.number = 51)
plot.phylo(unfilt_nj_sample,show.tip.label = F,use.edge.length = F,main="Unfiltered")
plot.phylo(filt_nj_sampled,show.tip.label = F,use.edge.length = F,main="Filtered")

RF.dist(filt_nj,unfilt_nj,normalize = T)

filt_nj <- reroot(NJ(alignment_filtered),node.number = 193)
unfilt_nj <- reroot(NJ(alignment_unfiltered),node.number = 193)

library(phytools)
library(phangorn)
treedist(unfilt_nj,filt_nj,noralize=T)

test_clade <- extract.clade(unfilt_nj,node = 614,)
extract.clade(filt_nj)
ape::write.FASTA(
  x = alignment_filtered,
  file = OUTFILE)

library(ape)
library(seqinr)
ref_design <- read.fasta("~/PHD/_ncov/Primers_secondtry/MN908947_ref_fasta.fasta",as.string = T)

primer_list_start_nucleotide <- table_to_send$starting_site_for_150bp_window+115
virus_window_sequence_list <- list()
virus_window_sequence_list_rev_comp <- list()
primer_per_window <- list()
PCR1_primer_per_window <- list()

rownames(alignment_matrix)[which(grepl(pattern = "2019-12",x=rownames(alignment_matrix))==T)]

selected_sites



myroot <- "hCoV-19/Wuhan/IPBCAMS-WH-01/2019|EPI_ISL_402123|2019-12-24"
alignment_matrix_filtered <- alignment_matrix[, selected_sites]
alignment_matrix_unfiltered <- alignment_matrix[, sample(1:29903,size = 29903,replace = F)]

##without sampling
alignment_filtered <- as.DNAbin(as.matrix(alignment_matrix_filtered))
alignment_unfiltered <- as.DNAbin(as.matrix(alignment_matrix_unfiltered))
filt_nj <- reroot(nj(alignment_filtered),node.number = 193)
unfilt_nj <- reroot(nj(alignment_unfiltered),node.number = 193)
plot.phylo(unfilt_nj,show.tip.label = F,use.edge.length = F,main="Unfiltered")
plot.phylo(filt_nj,show.tip.label = F,use.edge.length = F,main="Filtered")

RF.dist(unfilt_nj,filt_nj,normalize = T)
treedist(unfilt_nj,filt_nj)


#with sampling
sample_size <- 50
sampled_tips <- sample(1:nrow(alignment_matrix),replace = F,size = sample_size)
sampled_tips <- c(sampled_tips,which(rownames(alignment_matrix)==myroot))
alignment_filtered_sampled <- as.DNAbin(as.matrix(alignment_matrix_filtered[sampled_tips,]))
alignment_unfiltered_sampled <- as.DNAbin(as.matrix(alignment_matrix_unfiltered[sampled_tips,]))
filt_nj_sampled <- (nj(alignment_filtered_sampled))
unfilt_nj_sampled <- (nj(alignment_unfiltered_sampled))
filt_nj_root <- reroot(filt_nj_sampled,node.number = which(filt_nj_sampled$tip.label==myroot))
unfilt_nj_root <- reroot(unfilt_nj_sampled,node.number = which(filt_nj_sampled$tip.label==myroot))
unfilt_nj_root$tip.label <- 1:length(unfilt_nj_root$tip.label)
filt_nj_root$tip.label <- 1:length(filt_nj_root$tip.label)

plot.phylo(unfilt_nj_root,show.tip.label = T,use.edge.length = F,main="Unfiltered",tip.color = rainbow(sample_size))
plot.phylo(filt_nj_root,show.tip.label = T,use.edge.length = F,main="Filtered",tip.color = rainbow(sample_size))

RF.dist(unfilt_nj_root,filt_nj_root,normalize = T)
treedist(unfilt_nj_root,filt_nj_root)



filt_nj <- reroot(nj(alignment_filtered),node.number = 193)
unfilt_nj <- reroot(nj(alignment_unfiltered),node.number = 193)


plot.phylo(unfilt_nj,show.tip.label = F,use.edge.length = F,main="Unfiltered")
plot.phylo(filt_nj,show.tip.label = F,use.edge.length = F,main="Filtered")
plot.phylo(filt_nj_noroot,show.tip.label = F,use.edge.length = F)
plot.phylo(unfilt_nj_noroot,show.tip.label = F,use.edge.length = F)

sampling_ind <- sample(1:nrow(alignment_filtered),size = 50,replace = F)
sampling_ind <- c(sampling_ind,193)
filt_nj_sampled <- reroot(nj(alignment_filtered[sampling_ind,]),node.number = 51)
unfilt_nj_sample <- reroot(nj(alignment_unfiltered[sampling_ind,]),node.number = 51)


RF.dist(filt_nj,unfilt_nj,normalize = T)

filt_nj <- reroot(NJ(alignment_filtered),node.number = 193)
unfilt_nj <- reroot(NJ(alignment_unfiltered),node.number = 193)

library(phytools)
library(phangorn)
treedist(unfilt_nj,filt_nj,noralize=T)

test_clade <- extract.clade(unfilt_nj,node = 614,)
extract.clade(filt_nj)
ape::write.FASTA(
  x = alignment_filtered,
  file = OUTFILE)



#myreference_primers
ref_design <- read.fasta("~/PHD/_ncov/Primers_secondtry/MN908947_ref_fasta.fasta",as.string = T)

primer_list_start_nucleotide <- table_to_send$starting_site_for_150bp_window+115

virus_window_sequence_list <- list()
virus_window_sequence_list_rev_comp <- list()
primer_per_window <- list()
library(Biostrings)
for(i in 1:nrow(table_to_send)){
  virus_window_sequence_list[[i]] <- substring(text = as.character(ref_design),first = table_to_send$starting_site_for_150bp_window[i],last = table_to_send$starting_site_for_150bp_window[i]+WINDOW_SIZE)
  virus_window_sequence_list_rev_comp[[i]] <- reverseComplement(RNAString(virus_window_sequence_list[[i]]))


  temp_30 <- as.character(substring(virus_window_sequence_list_rev_comp[[i]],first = 1,last = WINDOW_SIZE))
  for(j in 1:8){
    if((substring(temp_30,first = 16+j,last = 16+j)=="C") | (substring(temp_30,first = 16+j,last = 16+j)=="G")){
      primer_per_window[[i]] <- substring(temp_30,first = 1,last = 16+j)
      break
    }
  }
}

write.fasta(sequences = virus_window_sequence_list,names = paste("windows",1:length(virus_window_sequence_list),sep = "_"),file.out = "~/PHD/_ncov/Primers_secondtry/Full_length_windows.fasta")
PCR1_primer_per_window_copy <- list()
for(i in 1:nrow(table_to_send)){
  temp_30_fwd <- (substring(virus_window_sequence_list[[i]],first = 1,last = WINDOW_SIZE))
  for(j in 1:15){
    if((substring(temp_30_fwd,first = 18+j,last = 18+j)=="c") | (substring(temp_30_fwd,first = 18+j,last = 18+j)=="g")){
      PCR1_primer_per_window_copy[[i]] <- substring(temp_30_fwd,first = 1,last = 18+j)
      break
    }
  }
}
PCR1_primer_per_window_noU <- gsub(PCR1_primer_per_window_copy,pattern = "u",replacement = "t")

primer_per_window_noU <- gsub(primer_per_window,,pattern = "U",replacement = "T")

write.fasta(sequences = as.list(primer_per_window_noU),names = paste('P_RT',1:length(primer_per_window),sep='_'),file.out = "~/PHD/_ncov/Primers_secondtry/RT_homoloyregions_115bp_60window.fasta")
write.fasta(sequences = as.list(PCR1_primer_per_window_noU),names = paste('P_PCR',1:length(primer_per_window),sep='_'),file.out = "~/PHD/_ncov/Primers_secondtry/PCR_homoloyregions_115bp_60window.fasta")

PCR2_RV_index1 <- gsub(pattern = " ",replacement = "","CAA GCA GAA GAC GGC ATA CGA GAT CGTGAT GTG ACT GGA GTT CAG ACG TGT GCT CTT CCG ATC TNN NNG AGG AGA GAG AGA GAG ")

PCR2_FW_uni_nooverhangs <- gsub(pattern = " ",replacement = "","AAT GAT ACG GCG ACC ACC GAG ATC TAC ACT CTT TCC CTA CAC GAC GCT CTT CCG ATC TNN NN")




RT_primer_set <- paste("CGTGTGTGCTCTTCCGATC","PPPPPPPP",primer_per_window_noU,sep="")

RT_primer_df <- data.frame(seq=rep(RT_primer_set,2),name=paste("AY_RTwindow",1:120,sep="_"),stringsAsFactors = F)
RT_primer_df$seq[1:60] <- gsub(x = RT_primer_df$seq[1:60],pattern = "PPPPPPPP",replacement = "AAAAGAAAAG")
RT_primer_df$seq[61:120] <- gsub(RT_primer_df$seq[61:120],pattern = "PPPPPPPP",replacement = "TTTCATTTCA")

Patient_bc_list <- list()
Patient_bc_list[[1]] <- "AAAAGAAAAG" ### 1 in andreas list
Patient_bc_list[[2]] <- "TTTCATTTCA" ### 94 in andres list
Patient_bc_list[[3]] <- "CCGGTCCGGT" ###
Patient_bc_list[[4]] <- "GGCTTGGCTT" ###

FW_universal_adaptor <- "AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT"

FW_primer_df_copy <- data.frame(seq=PCR1_primer_per_window_noU,name=paste("AY_PCR1window",1:60,sep="_"))
FW_primer_df_copy$seq <- toupper(paste(FW_universal_adaptor,FW_primer_df_copy$seq,sep=""))

final_primers <- rbind(RT_primer_df,FW_primer_df_copy)

write.csv(final_primers,file = "~/PHD/_ncov/Primers_secondtry/Round2_Final_Primers.csv")




### to differentiate the positive controls

virus_window_sequence_list_pos <- list()
virus_window_sequence_list_rev_comp_pos <- list()
primer_per_window_pos <- list()

positive_controls_startingsites <- c()
library(Biostrings)
for(i in 1:nrow(table_to_send)){
  virus_window_sequence_list_pos[[i]] <- substring(text = as.character(ref_design),first = positive_controls_startingsites[i],last = positive_controls_startingsites[i]+WINDOW_SIZE)
  virus_window_sequence_list_rev_comp_pos[[i]] <- reverseComplement(RNAString(virus_window_sequence_list_pos[[i]]))


  temp_30 <- as.character(substring(virus_window_sequence_list_rev_comp_pos[[i]],first = 1,last = WINDOW_SIZE))
  for(j in 1:8){
    if((substring(temp_30,first = 16+j,last = 16+j)=="C") | (substring(temp_30,first = 16+j,last = 16+j)=="G")){
      primer_per_window_pos[[i]] <- substring(temp_30,first = 1,last = 16+j)
      break
    }
  }
}
PCR1_primer_per_window_pos <- list()
for(i in 1:nrow(table_to_send)){
  temp_30_fwd <- (substring(virus_window_sequence_list_pos[[i]],first = 1,last = WINDOW_SIZE))
  for(j in 1:15){
    if((substring(temp_30_fwd,first = 18+j,last = 18+j)=="c") | (substring(temp_30_fwd,first = 18+j,last = 18+j)=="g")){
      PCR1_primer_per_window_pos[[i]] <- substring(temp_30_fwd,first = 1,last = 18+j)
      break
    }
  }
}

write.fasta(sequences = primer_per_window_noU,)



## patient barcode 3 and 4
RT_primer_set <- paste("CGTGTGTGCTCTTCCGATC","PPPPPPPP",primer_per_window_noU,sep="")

RT_primer_df_patients3_4 <- data.frame(seq=rep(RT_primer_set,2),name=paste("AY_RT_p34_w",1:120,sep="_"),stringsAsFactors = F)
RT_primer_df_patients3_4$seq[1:60] <- gsub(x = RT_primer_df_patients3_4$seq[1:60],pattern = "PPPPPPPP",replacement = "CCGGTCCGGT")
RT_primer_df_patients3_4$seq[61:120] <- gsub(RT_primer_df_patients3_4$seq[61:120],pattern = "PPPPPPPP",replacement = "GGCTTGGCTT")
write.csv(RT_primer_df_patients3_4,file = "~/PHD/_ncov/Primers_secondtry/Round2_Final_Primers_patients34.csv")



library(R.matlab)

check_readmat <- readMat("~/Downloads/96_5mers.mat")

check_readmat$sequences5
andreas10mer <- paste(check_readmat$sequences5,check_readmat$sequences5,sep="")
andreas10mer_copy <- andreas10mer
andreas10mer_copy[96] <- "TTTTATTTTT"

library(stringdist)
andreas_5mer_dist <- stringdistmatrix(check_readmat$sequences5,check_readmat$sequences5,method="lv")
andreas10mer_dist <- stringdistmatrix(andreas10mer,andreas10mer,method="hamming")
andreas10mer_dist <- stringdistmatrix(andreas10mer,andreas10mer,method="hamming")
stringdist(andreas10mer[1],andreas10mer[94],method="hamming")
diag(andreas10mer_dist) <- 0
diag(andreas10mer_copy) <- NA
library(pheatmap)
pdf("~/PHD/_ncov/figures/heatmap_distance_humanbarcode.pdf")
pheatmap(andreas10mer_dist)
dev.off()


write.csv(andreas10mer,file = "~/PHD/_ncov/andreas_sequences.txt")



save.image("~/PHD/_ncov/Primers_secondtry/Viral_selection_code_object.RData")
load("~/PHD/_ncov/Primers_secondtry/Viral_selection_code_object.RData")


## need to remove all before first /
names_without <- gsub("hCoV-19/","",rownames(alignment_filtered))

names_before <- gsub("\\/.*","",names_without)
gsub("\\/.*","",rownames(alignment_filtered))
country_names <- c("China","Germany","UK","Ireland","Australia","USA","Japan","Taiwan","Netherlands","Luxembourg","Singapore","South Korea","Nepal",
                   "Brazil","Switzerland","Czech Republic","France","India",
                   "Finland","Italy","Cambodia","Belgium","Canada","Portugal",
                   "Congo","Hong Kong","Spain", "Chile","New Zealand","Nigeria",
                   "Sweden","Vietnam","Mexico","Panama")
#country_counts <- ## need internet




ALIGNMENT_FILE_2 <- "~/PHD/_ncov/bdsky_comparison_code_and_results/all_seqs_alignment.masked"

alignment_2 <- ape::read.FASTA(file = ALIGNMENT_FILE_2, type = "DNA")
alignment_matrix <- as.data.frame(as.character(as.matrix(alignment)))






### designing pools of 13
patient_13_primer_example <- toupper(as.character(read.fasta("~/PHD/_ncov/Primers_secondtry/14_mix_patient1.fasta",as.string = T)))
patient_13_primer_names <- names(read.fasta("~/PHD/_ncov/Primers_secondtry/14_mix_patient1.fasta",as.string = T))
patient_13_primer_names[1] <-"RT_n4"
Patient_bc_list <- list()
Patient_bc_list[[1]] <- "AAAAGAAAAG" ### 1 in andreas list
Patient_bc_list[[2]] <- "TTTCATTTCA" ### 94 in andres list
Patient_bc_list[[3]] <- "CCGGTCCGGT" ###
Patient_bc_list[[4]] <- "GGCTTGGCTT" ###

which(andreas_double_bcs==Patient_bc_list[[4]])

rand_barcodes <- sample(x = (1:96)[-c(1,94,38,60)],size = 15,replace = F)
# 78 56 83 32  6  8 90  4 29 71 96 24 25 10 7
rand_barcodes7 <- c(rand_barcodes,7)
andreas_double_bcs <- paste(check_readmat$sequences5,check_readmat$sequences5,sep="")
match(andreas_double_bcs,unlist(Patient_bc_list))
patient_24barcodes <- list()
patient_24_names <- list()
for(i in 2:15){
  patient_24barcodes[[i-1]] <- gsub(x = patient_13_primer_example,pattern = "AAAAGAAAAG",replacement = andreas_double_bcs[rand_barcodes7[i]])
  patient_24_names[[i-1]] <- paste(patient_13_primer_names,"p",i+3,sep="_")
}
patient_24barcodes_unlist <- unlist(patient_24barcodes)
patient_24_names_unlist <- unlist(patient_24_names)
patients_5bis18_df <- data.frame(seq=patient_24barcodes_unlist,names=patient_24_names_unlist,stringsAsFactors = F)
write.csv(patients_5bis18_df,"~/PHD/_ncov/Primers_secondtry/Patients_5bis18_with18.csv")


if (!requireNamespace("BiocManager", quietly = TRUE))
  install.packages("BiocManager")

BiocManager::install("Rsamtools")
#load library
library(Rsamtools)

align1 <- scanBam("~/PHD/_ncov/bioinformatics/all_alignment 14_positive.bam")


bam_files <- list.files(path="~/PHD/_ncov/bioinformatics/",pattern = "new16.bam",full.names = T)
align16 <- lapply(bam_files,scanBam)

align1 <- scanBam("~/PHD/_ncov/bioinformatics/all_alignment 14_positive.bam")

align16 <- lapply(bam_files,scanBam)
bam_files_rc <- list.files(path="~/PHD/_ncov/bioinformatics/",pattern = "withrc.bam",full.names = T)
align16rc <- lapply(bam_files_rc,scanBam)



plot(table(align1[[1]]$pos))
pdf("~/PHD/_ncov/figures/alignment_human_16.pdf",height=20,width=20)
par(mfrow=c(4,4))
for(i in 1:16){
  plot(table(align16[[i]][[1]]$pos),xlim=c(0,32235))
  #axis(1,labels = c(""))
}
dev.off()
plot(table(align16[[1]][[1]]$pos))
plot(table(align16[[1]][[1]]$qwidth))


###
window_names <- c("RNAP","Site10","Site12","Site13","Site14","RdRP_WHO",
                  "Twist2","Twist1","Twist3","E_WHO",
                  "N3","N2","N_WHO","N1","polA")
window_length <- 117
alignment_bins <- list()
alignment_bins[[1]] <- 1:93 #rnap
alignment_bins[[2]] <- 4889:(4889+window_size) #site10
alignment_bins[[3]] <- 5222:(5222+window_size) #site12
alignment_bins[[4]] <- 5355:(5361+window_size) #site13
alignment_bins[[5]] <- 5476:(5476+window_size-2) #site14
alignment_bins[[6]] <- 17721:(17721+window_size) #rdrp
alignment_bins[[7]] <- 21340:(21340+window_size) # twist2 orfab
alignment_bins[[8]] <- 24585:(24591+window_size) ##twist1 s gene
alignment_bins[[9]] <- 28399:(28399+window_size) #twist 3 orf3a
alignment_bins[[10]] <- 28603:(28603+window_size) #E gene
alignment_bins[[11]] <- 30573:(30573+window_size )# N3
alignment_bins[[12]] <- 30964:31033 #N2
alignment_bins[[13]] <- 31034:(31034+window_size) #WHO N
alignment_bins[[14]] <- 31446:(31446+window_size) # N1
alignment_bins[[15]] <- 32180:32325 #polyA

total_windows <- unlist(alignment_bins)
(match(as.integer(names(table(dilution_new_bam[[3]][[1]]$pos))),total_windows)) ## to find out which is missing

### 32195??

map_into_bins <- function(my_bam_list){
  map.list <- list()
  for(i in 1:length(my_bam_list)){
    map.list[[i]] <- list()
    for(j in 1:length(alignment_bins)){

      map.list[[i]][[j]] <- length(which(my_bam_list[[i]][[1]]$pos %in% alignment_bins[[j]]))

    }
    if(sum(unlist(map.list[[i]]))!=length(which(my_bam_list[[i]][[1]]$pos>=0))){
      print(paste("warning",i,"at",j))
    }
    #print(length(unlist(map.list[[i]])))
    #print(length(which(my_bam_list[[i]][[1]]$pos>=0)))
  }

  return(map.list)
}

checking16 <- map_into_bins(align16)
checking16rc <- map_into_bins(align16rc)
plot16rc <- plot_align(checking16rc)
plot16_norc <- plot_align(checking16)
plot16_norc_point <- plot_align(checking16,"point")

pdf("~/PHD/_ncov/figures/human_16_without_rev_comp_bc_bargraph.pdf")
plot16_norc
dev.off()
pdf("~/PHD/_ncov/figures/human_16_without_rev_comp_bc_point.pdf")
plot16_norc_point
dev.off()
pdf("~/PHD/_ncov/figures/human_16_with_rev_comp_bc_bargraph.pdf")
plot16rc
dev.off()


checkmelt <- melt(checking16)
checkmelt$site <- window_names[checkmelt$L2]
checkmelt$site <- factor(checkmelt$site, levels = window_names)
checkmelt$value_new <- checkmelt$value

checkmelt$value_new[which(checkmelt$value_new==0)] <- 01
checkmelt$value_new[which(checkmelt$value_new==0)] <- 01


checkmelt <- ggplot(checkmelt,aes(y=value_new,x=site)) + geom_point(data = checkmelt,stat="identity",position = "dodge",group=site) + facet_wrap(L1~.) + theme_bw() + theme(panel.grid.minor = element_blank(),axis.text.x = element_text(angle = 90, hjust = 1)) + theme(strip.background =element_rect(fill="white"))+theme(strip.text = element_text(colour = 'black')) + scale_y_log10(limits=c(0.1,1000))
## L2 is site name
#L1 is sample
##


### plotting sequencing run
plot_align <- function(map.list,graph.type){
  checkmelt <- melt(map.list)
  checkmelt$site <- window_names[checkmelt$L2]
  checkmelt$site <- factor(checkmelt$site, levels = window_names)
  checkmelt$mapped_reads <- checkmelt$value
  checkmelt$mapped_reads[which(checkmelt$mapped_reads==0)] <- NA
  if(graph.type=="bar"){
    checkplot <- ggplot(checkmelt,aes(y=mapped_reads,x=site)) + geom_bar(data = checkmelt,stat="identity",position = "dodge") + facet_wrap(L1~.) + theme_bw() + theme(panel.grid.minor = element_blank(),axis.text.x = element_text(angle = 90, hjust = 1)) + theme(strip.background =element_rect(fill="white"))+theme(strip.text = element_text(colour = 'black'))
  }
  if(graph.type=="point"){
    checkmelt$mapped_reads <- checkmelt$value
    checkmelt$mapped_reads[which(checkmelt$value==0)] <- 0.2
    checkplot <- ggplot(checkmelt,aes(y=mapped_reads,x=site)) + geom_point(data = checkmelt,stat="identity",position = "dodge") + facet_wrap(L1~.) + theme_bw() + theme(panel.grid.minor = element_blank(),axis.text.x = element_text(angle = 90, hjust = 1)) + theme(strip.background =element_rect(fill="white"))+theme(strip.text = element_text(colour = 'black')) + scale_y_log10(limits=c(0.1,max(checkmelt$mapped_reads,na.rm = T)+100))
  }
  return(checkplot)
}

dilution_seqrun5 <- list.files(path="~/PHD/_ncov/seqrun_5_dilution/barcode1/",pattern = ".bam",full.names = T)
dilution_seqrun5 <- list.files(path="~/PHD/_ncov/seqrun_5_dilution/barcode1_rc/checking_again_one/",pattern = ".bam",full.names = T)

dilution_bam <- lapply(dilution_seqrun5,scanBam)
check <- scanBam("~/PHD/_ncov/seqrun_5_dilution/barcode1/testing/BSSE_QGF_137705_000000000_D8J6P_1_B9_TAGCTT_S9_L001_R1_001_MM_1.fastq-one.fastq.bam")

pdf("~/PHD/_ncov/figures/alignment_dilution_seqrun5.pdf",height=20,width=20)
par(mfrow=c(3,3))
for(i in 1:9){
  plot(table(dilution_bam[[i]][[1]]$pos[which(dilution_bam[[i]][[1]]$>75)]),xlim=c(0,32235),main=i)
  #axis(1,labels = c(""))
}
dev.off()

dilution_bam[[1]][[1]]$seq[which(dilution_bam[[i]][[1]]$pos>0)]
dilution_bam[[1]][[1]]$pos[which(dilution_bam[[1]][[1]]$qwidth>130)]
table(dilution_bam[[1]][[1]]$qwidth)


checking_cut <- ggplot(melt(cut(align16[[5]][[1]]$pos,seq(0,32000,150)))) + geom_histogram(stat="bin")
df2 <- aggregate(df, #the data frame
                 by=list(cut(df$RawMin,seq(0,10,0.5))), #the bins (see below)
                 mean) #the aggregating function


### need to get log scale


align_complete <- function(my_bam_list,graph.type){
  map.list <- list()
  for(i in 1:length(my_bam_list)){
    map.list[[i]] <- list()
    for(j in 1:length(alignment_bins)){

      map.list[[i]][[j]] <- length(which(my_bam_list[[i]][[1]]$pos %in% alignment_bins[[j]]))

    }
    if(sum(unlist(map.list[[i]]))!=length(which(my_bam_list[[i]][[1]]$pos>=0))){
      print(paste("warning",i,"at",j))
    }
    #print(length(unlist(map.list[[i]])))
    #print(length(which(my_bam_list[[i]][[1]]$pos>=0)))
  }

  checkmelt <- melt(map.list)
  checkmelt$site <- window_names[checkmelt$L2]
  checkmelt$site <- factor(checkmelt$site, levels = window_names)
  checkmelt$mapped_reads <- checkmelt$value
  checkmelt$mapped_reads[which(checkmelt$mapped_reads==0)] <- NA
  if(graph.type=="bar"){
    checkplot <- ggplot(checkmelt,aes(y=mapped_reads,x=site)) + geom_bar(data = checkmelt,stat="identity",position = "dodge") + facet_wrap(L1~.) + theme_bw() + theme(panel.grid.minor = element_blank(),axis.text.x = element_text(angle = 90, hjust = 1)) + theme(strip.background =element_rect(fill="white"))+theme(strip.text = element_text(colour = 'black'))
  }
  if(graph.type=="point"){
    checkmelt$mapped_reads <- checkmelt$value
    checkmelt$mapped_reads[which(checkmelt$value==0)] <- 0.2
    checkplot <- ggplot(checkmelt,aes(y=mapped_reads,x=site)) + geom_point(data = checkmelt,stat="identity",position = "dodge") + facet_wrap(L1~.) + theme_bw() + theme(panel.grid.minor = element_blank(),axis.text.x = element_text(angle = 90, hjust = 1)) + theme(strip.background =element_rect(fill="white"))+theme(strip.text = element_text(colour = 'black')) + scale_y_log10(limits=c(0.1,max(checkmelt$mapped_reads,na.rm = T)+100))
  }
  return(checkplot)
}
checkbar45 <- align_complete(my_bam_list = align16[4:5],"bar") + ggtitle("Two human barcodes/plate indices")
pdf("~/PHD/_ncov/figures/two_example_human.pdf",width=10,height=6)
checkbar45
dev.off()

c7_list <- list()
c7_list[[1]] <- scanBam("~/PHD/_ncov/bioinformatics/C7_pre_filter.bam")
c7_list[[2]] <- scanBam("~/PHD/_ncov/bioinformatics/C7_post_filter.C7_postfilter.bam")
c7_list[[3]] <- scanBam("~/PHD/_ncov/bioinformatics/C7_post_filter 2.C7_postfilter.bam")
c7_list[[4]] <- scanBam("~/PHD/_ncov/bioinformatics/C7_post_filter 3.C7_postfilter.bam")
c7_list[[5]] <- scanBam("~/PHD/_ncov/bioinformatics/B1_trimmed_100_ingeneious.bam")
c7_list[[6]] <- scanBam("~/PHD/_ncov/bioinformatics/B9_trimmed__withingeneious.bam")
c7_list_plot <- align_complete(my_bam_list = c7_list,"bar") + ggtitle("Reads mapping without barcodes")
c7_list_plot56 <- align_complete(my_bam_list = c7_list[5:6],"bar") + ggtitle("Reads mapping without barcodes")
c7_list_plot56pt <- align_complete(my_bam_list = c7_list[5:6],"point") + ggtitle("Reads mapping without barcodes")


dilution_new <- list.files(path="~/PHD/_ncov/bioinformatics/dilution_exported_trimmed_align/",pattern = ".bam",full.names = T)
dilution_new_bam <- lapply(dilution_new,scanBam)

dilution_newcheckbarplot <- align_complete(dilution_new_bam,"bar")
dilution_newcheck_quant <- map_into_bins(dilution_new_bam)
c7_map <- map_into_bins(c7_list)
ratio_virus_rnap <- list()
ratio_rnap_virus <- list()
for(i in 1:length(dilution_newcheck_quant)){
  ratio_virus_rnap[[i]] <- sum(unlist(dilution_newcheck_quant[[i]])[2:15])/unlist(dilution_newcheck_quant[[i]])[1]
  ratio_rnap_virus[[i]] <- unlist(dilution_newcheck_quant[[i]])[1]/sum(unlist(dilution_newcheck_quant[[i]])[c(2,3,5:15)])
}
c7_list

c7_list
unlist(c7_list[[i]])[1]/sum(unlist(c7_list[[i]])[c(2,3,5:15)])

pdf("~/PHD/_ncov/figures/C7_with_and_without_barcode_filter_bar.pdf",width=10,height=6)
c7_list_plot #+ (scales="free_y")
dev.off()


100*unlist(dilution_newcheck_quant[[1]])/sum(unlist(dilution_newcheck_quant[[1]]))


write.fasta(sequences = as.list(andreas10mer),names = 1:length(andreas10mer),file = "~/PHD/_ncov/barcodes_fasta.fasta")


dilution_seqrun9 <- list.files(path="~/PHD/_ncov/bioinformatics/",pattern = "run9.bam",full.names = T)

dilution_bam <- lapply(dilution_seqrun9[2:13],scanBam)


plot(table(align1[[1]]$pos))
pdf("~/PHD/_ncov/figures/alignment_seqrun9.pdf",height=20,width=20)
par(mfrow=c(4,3))
for(i in 1:12){
  plot(table(dilution_bam[[i]][[1]]$pos),xlim=c(0,32235),main=seqrun9_labels[i],xlab="site",ylab="reads")
  #axis(1,labels = c(""))
}
dev.off()

seqrun9_labels <- c("F3","F2","F1","F12","F11","F10","F9","F8","F6","F5","F4","F1")



all96_primer_list_nnn <- paste("CGTGTGTGCTCTTCCGATC",andreas10mer,"NNNNNN",sep="")
write.csv(all96_primer_list_nnn,file = "~/PHD/_ncov/Primers_secondtry/hexamer_96_barcode.csv")


write.csv(andreas10mer,"~/PHD/_students/Spahr/barcodes_96_well.csv")

### trb adding glue

tcra_primers <- read.table("~/PHD/sequences_oldyoung/TCR_repertoire_primers_new_300bpVgene.csv")
tcrb_primers <- read.table("~/PHD/sequences_oldyoung/TCR_repertoire_primers_new_300bpVgene.csv")

tcrb_primers_glue <- paste("CCCTCCTTTAATTCCC",tcrb_primers$V1,sep="")
tcrb_primers_names <- paste("CCCTCCTTTAATTCCC",tcrb_primers$V1,sep="")

write.csv(tcrb_primers_glue,file='~/PHD/sequences_oldyoung/TCR_repertoire_primers_new_wihtglue.csv')





dilution_seqrun10 <- list.files(path="~/PHD/_ncov/seqrun10/",pattern = ".bam",full.names = T)
dilution_bam <- lapply(dilution_seqrun10,scanBam)
plot(table(dilution_bam[[1]]$pos))
pdf("~/PHD/_ncov/figures/alignment_seqrun9.pdf",height=20,width=20)
par(mfrow=c(2,4))
for(i in 1:8){
  plot(table(dilution_bam[[i]][[1]]$pos),xlim=c(0,32235),main=seqrun10_labels[i],xlab="site",ylab="reads")
  #axis(1,labels = c(""))
}
dev.off()

seqrun9_labels <- c("F3","F2","F1","F12","F11","F10","F9","F8","F6","F5","F4","F1")
seqrun10_labels <- c("G7","G6","G5","G4","G3","G2","G1","G8")




dilution_seqrun11 <- list.files(path="~/PHD/_ncov/bioinformatics/seqrun11/",pattern = ".bam",full.names = T)
dilution_seqrun11_new <- dilution_seqrun11
dilution_seqrun11_new <- c(dilution_seqrun11[-c(2,3,4)],dilution_seqrun11[c(2,3,4)])
dilution_seqrun11 <- list.files(path="~/PHD/_ncov/bioinformatics/seqrun11/",pattern = ".bam",full.names = T)
dilution_bam11 <- lapply(dilution_seqrun11,scanBam)
plot(table(dilution_bam11[[1]][[1]]$pos))
pdf("~/PHD/_ncov/figures/alignment_seqrun11.pdf",height=20,width=20)
par(mfrow=c(3,4))
for(i in 1:12){
  plot(table(dilution_bam11[[i]][[1]]$pos),xlim=c(0,32235),main=paste("H",i,sep="")[i],xlab="site",ylab="reads")
  #axis(1,labels = c(""))
}
dev.off()



dilution_seqrun12 <- list.files(path="~/PHD/_ncov/bioinformatics/seqrun12/",pattern = ".bam",full.names = T)
dilution_seqrun12_new <- dilution_seqrun12
dilution_seqrun12_new <- c(dilution_seqrun12[-c(2,3,4)],dilution_seqrun12[c(2,3,4)])
dilution_bam12 <- lapply(dilution_seqrun12_new,scanBam)
plot(table(dilution_bam12[[1]][[1]]$pos))
pdf("~/PHD/_ncov/figures/alignment_seqrun12.pdf",height=20,width=20)
par(mfrow=c(3,4))
for(i in 1:12){
  plot(table(dilution_bam12[[i]][[1]]$pos),xlim=c(0,32235),main=paste("I",i,sep=""),xlab="site",ylab="reads")
  #axis(1,labels = c(""))
}
dev.off()


checking <- scanBam("/Users/ayermano/PHD/_ncov/bioinformatics/seqrun12//S12_I1.bam")
plot(table(checking[[1]]$pos),xlim=c(0,32235),main=paste("I",i,sep=""),xlab="site",ylab="reads")


save.image("~/PHD/_ncov/corona_robject_2020_05_13.RData")
save.image("~/PHD/_ncov/corona_robject_2020_06_04.RData")

