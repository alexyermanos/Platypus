file_path_vec <- list.files(source_code_dir, full.names = T)
for(f_path in file_path_vec){
#print(f_path)
tryCatch({source(f_path)}, error = function(e){e
})
}
#deparse all functions i.e. get a list of character vectors where each element is a line of a function
c <- list()
n <- 1
for (i in ls()) {
print(i)
a <- get(i)
c[[n]] <- deparse(a)
names(c)[n] <- i
n <- n+1
}
#search for the patterns which devtools:check complained about. In this case:
#Error: Dependency package(s) 'SeuratObjects','ggplot','stingr' not available.
for(i in 1:length(c)){
for(j in 1:length(c[[i]])){
if(stringr::str_detect(c[[i]][j], "loadName")){print(paste0(names(c)[i], " line ", c[[i]][j]))}
}
}
#search for the patterns which devtools:check complained about. In this case:
#Error: Dependency package(s) 'SeuratObjects','ggplot','stingr' not available.
for(i in 1:length(c)){
for(j in 1:length(c[[i]])){
if(stringr::str_detect(c[[i]][j], "requireName")){print(paste0(names(c)[i], " line ", c[[i]][j]))}
}
}
#search for the patterns which devtools:check complained about. In this case:
#Error: Dependency package(s) 'SeuratObjects','ggplot','stingr' not available.
for(i in 1:length(c)){
for(j in 1:length(c[[i]])){
if(stringr::str_detect(c[[i]][j], "ape::as.")){print(paste0(names(c)[i], " line ", c[[i]][j]))}
}
}
#search for the patterns which devtools:check complained about. In this case:
#Error: Dependency package(s) 'SeuratObjects','ggplot','stingr' not available.
for(i in 1:length(c)){
for(j in 1:length(c[[i]])){
if(stringr::str_detect(c[[i]][j], "ape::as.dna")){print(paste0(names(c)[i], " line ", c[[i]][j]))}
}
}
#search for the patterns which devtools:check complained about. In this case:
#Error: Dependency package(s) 'SeuratObjects','ggplot','stingr' not available.
for(i in 1:length(c)){
for(j in 1:length(c[[i]])){
if(stringr::str_detect(c[[i]][j], "ape::fastme.os")){print(paste0(names(c)[i], " line ", c[[i]][j]))}
}
}
devtools::run_examples()
DEGs <- GEX_DEgenes(GEX = Platypus::small_vgm[[2]],min.pct = .25,
#' group1 = "s1",group2 = "s2", return.plot = "volcano")
)
DEGs <- GEX_DEgenes(GEX = Platypus::small_vgm[[2]],min.pct = .25,
group1 = "s1",group2 = "s2", return.plot = "volcano")
DEGs[[1]]
DEGs[[2]]
DEGs <- GEX_DEgenes(GEX = Platypus::small_vgm[[2]],min.pct = .25,
group1 = "s1",group2 = "s2", return.plot = "volcano", up.genes = F, down.genes = F)
DEGs[[2]]
plot(DEGs[[2]])
gridExtra::grid.arrange(DEGs[[2]])
PlatypusDB_fetch("yermanos2021a//GEXmatrix", load.to.enviroment = T)
DEGs <- GEX_DEgenes(GEX = yermanos2021a_GEXmatrix[[2]],min.pct = .25,
group1 = "s1",group2 = "s2", return.plot = "volcano", up.genes = F, down.genes = F)
DEGs <- GEX_DEgenes(GEX = yermanos2021a_GEXmatrix[[2]],min.pct = .25,
group1 = "s1",group2 = "s2", return.plot = "volcano", up.genes = F, down.genes = F)
DEGs <- GEX_DEgenes(GEX = yermanos2021a__GEXmatrix[[2]],min.pct = .25,
group1 = "s1",group2 = "s2", return.plot = "volcano", up.genes = F, down.genes = F)
DEGs[[2]]
DEGs[[1]]
source("~/GitHub/Platypus/R/GEX_DEgenes.R")
DEGs <- GEX_DEgenes(GEX = yermanos2021a__GEXmatrix[[2]],min.pct = .25,
group1 = "s1",group2 = "s2", return.plot = "volcano", up.genes = F, down.genes = F)
DEGs[[2]]
DEGs <- GEX_DEgenes(GEX = yermanos2021a__GEXmatrix[[2]],min.pct = .25,
group1 = "s1",group2 = "s2", return.plot = "heatmap", up.genes = F, down.genes = F)
DEGs[[Â²]]
DEGs[[2]]]
DEGs[[2]]
DEGs <- GEX_DEgenes(GEX = yermanos2021a__GEXmatrix[[2]],min.pct = .25,
group1 = "s1",group2 = "s2", return.plot = "volcano", up.genes = 1, down.genes = 1)
DEGs[[2]]
ggplot2::ggsave(DEGs[[2]], file = "test.png", width = 30, height = 30)
getwd()
source("~/GitHub/Platypus/R/GEX_DEgenes.R")
devtools::run_examples()
install.packages("ssh")
library(dplyr)
c(1.3,2.5,3.1) %>% round(2)
c(1.3,2.5,3.1) %>% round(0)
. a- 1
. <- 1
.
#VK 23-6-21
#This is for detecting errors in the function calling. i.e. if a package is spelled wrong e.g. ggplod2::aes
library(stringr)
#get all functions of the package into workspace
source_code_dir <- "C:/Users/vickr/Documents/GitHub/Platypus/R" #dont hate me for my file organisation, github placed the repository there
file_path_vec <- list.files(source_code_dir, full.names = T)
for(f_path in file_path_vec){
#print(f_path)
tryCatch({source(f_path)}, error = function(e){e
})
}
#deparse all functions i.e. get a list of character vectors where each element is a line of a function
c <- list()
n <- 1
for (i in ls()) {
print(i)
a <- get(i)
c[[n]] <- deparse(a)
names(c)[n] <- i
n <- n+1
}
#search for the patterns which devtools:check complained about. In this case:
#Error: Dependency package(s) 'SeuratObjects','ggplot','stingr' not available.
for(i in 1:length(c)){
for(j in 1:length(c[[i]])){
if(stringr::str_detect(c[[i]][j], "ggplot2::ggname")){print(paste0(names(c)[i], " line ", c[[i]][j]))}
}
}
#search for the patterns which devtools:check complained about. In this case:
#Error: Dependency package(s) 'SeuratObjects','ggplot','stingr' not available.
for(i in 1:length(c)){
for(j in 1:length(c[[i]])){
if(stringr::str_detect(c[[i]][j], "ggplot2:::ggname")){print(paste0(names(c)[i], " line ", c[[i]][j]))}
}
}
library(stringr)
#get all functions of the package into workspace
source_code_dir <- "C:/Users/vickr/Documents/GitHub/Platypus/R" #dont hate me for my file organisation, github placed the repository there
file_path_vec <- list.files(source_code_dir, full.names = T)
for(f_path in file_path_vec){
#print(f_path)
tryCatch({source(f_path)}, error = function(e){e
})
}
#deparse all functions i.e. get a list of character vectors where each element is a line of a function
c <- list()
n <- 1
for (i in ls()) {
print(i)
a <- get(i)
c[[n]] <- deparse(a)
names(c)[n] <- i
n <- n+1
}
#search for the patterns which devtools:check complained about. In this case:
#Error: Dependency package(s) 'SeuratObjects','ggplot','stingr' not available.
for(i in 1:length(c)){
for(j in 1:length(c[[i]])){
if(stringr::str_detect(c[[i]][j], "rlang")){print(paste0(names(c)[i], " line ", c[[i]][j]))}
}
}
exec(a)
library(rlang)
exec(a)
install.packages("biomaRt")
BiocManager::install("biomaRt")
install.packages("dichromat")
install.packages("edgeR")
BiocManager::install("edgeR")
install.packages("graphkernels")
install.packages("graphlayouts")
install.packages("iNEXT")
install.packages("kmer")
install.packages("Matrix.utils")
install.packages("monocle")
#VK 23-6-21
#This is for detecting errors in the function calling. i.e. if a package is spelled wrong e.g. ggplod2::aes
library(stringr)
#get all functions of the package into workspace
source_code_dir <- "C:/Users/vickr/Documents/GitHub/Platypus/R" #dont hate me for my file organisation, github placed the repository there
file_path_vec <- list.files(source_code_dir, full.names = T)
for(f_path in file_path_vec){
#print(f_path)
tryCatch({source(f_path)}, error = function(e){e
})
}
#deparse all functions i.e. get a list of character vectors where each element is a line of a function
c <- list()
n <- 1
for (i in ls()) {
print(i)
a <- get(i)
c[[n]] <- deparse(a)
names(c)[n] <- i
n <- n+1
}
#search for the patterns which devtools:check complained about. In this case:
#Error: Dependency package(s) 'SeuratObjects','ggplot','stingr' not available.
for(i in 1:length(c)){
for(j in 1:length(c[[i]])){
if(stringr::str_detect(c[[i]][j], "monocle::")){print(paste0(names(c)[i], " line ", c[[i]][j]))}
}
}
install.packages("monocle3")
BiocManager::install("monocle3")
devtools::install_github('cole-trapnell-lab/monocle3')
install.packages("Peptites")
BiocManager::install("Peptides")
install.packages("ProjecTILs")
BiocManager::install("ProjecTILs")
remotes::install_github("carmonalab/ProjecTILs")
BiocManager::install("Ucell")
BiocManager::install("UCell")
remotes::install_github("carmonalab/scGate")
remotes::install_github("carmonalab/ProjecTILs")
BiocManager::install("r3dmol")
BiocManager::install("readbitmap")
BiocManager::install("readjson")
install.packages("readjson")
for(i in 1:length(c)){
for(j in 1:length(c[[i]])){
if(stringr::str_detect(c[[i]][j], "readjson")){print(paste0(names(c)[i], " line ", c[[i]][j]))}
}
}
#VK 23-6-21
#This is for detecting errors in the function calling. i.e. if a package is spelled wrong e.g. ggplod2::aes
library(stringr)
#get all functions of the package into workspace
source_code_dir <- "C:/Users/vickr/Documents/GitHub/Platypus/R" #dont hate me for my file organisation, github placed the repository there
file_path_vec <- list.files(source_code_dir, full.names = T)
for(f_path in file_path_vec){
#print(f_path)
tryCatch({source(f_path)}, error = function(e){e
})
}
#deparse all functions i.e. get a list of character vectors where each element is a line of a function
c <- list()
n <- 1
for (i in ls()) {
print(i)
a <- get(i)
c[[n]] <- deparse(a)
names(c)[n] <- i
n <- n+1
}
#search for the patterns which devtools:check complained about. In this case:
#Error: Dependency package(s) 'SeuratObjects','ggplot','stingr' not available.
for(i in 1:length(c)){
for(j in 1:length(c[[i]])){
if(stringr::str_detect(c[[i]][j], "readjson")){print(paste0(names(c)[i], " line ", c[[i]][j]))}
}
}
for(i in 1:length(c)){
for(j in 1:length(c[[i]])){
if(stringr::str_detect(c[[i]][j], "readjson")){print(paste0(names(c)[i], " line ", c[[i]][j]))}
}
}
#VK 23-6-21
#This is for detecting errors in the function calling. i.e. if a package is spelled wrong e.g. ggplod2::aes
library(stringr)
#get all functions of the package into workspace
source_code_dir <- "C:/Users/vickr/Documents/GitHub/Platypus/R" #dont hate me for my file organisation, github placed the repository there
file_path_vec <- list.files(source_code_dir, full.names = T)
for(f_path in file_path_vec){
#print(f_path)
tryCatch({source(f_path)}, error = function(e){e
})
}
#deparse all functions i.e. get a list of character vectors where each element is a line of a function
c <- list()
n <- 1
for (i in ls()) {
print(i)
a <- get(i)
c[[n]] <- deparse(a)
names(c)[n] <- i
n <- n+1
}
#search for the patterns which devtools:check complained about. In this case:
#Error: Dependency package(s) 'SeuratObjects','ggplot','stingr' not available.
for(i in 1:length(c)){
for(j in 1:length(c[[i]])){
if(stringr::str_detect(c[[i]][j], "ggname")){print(paste0(names(c)[i], " line ", c[[i]][j]))}
}
}
#now correct the errors
#hope that helped!
install.packages("SeuratWrappers")
BiocManager::install("Seuratwrappers")
remotes::install_github('satijalab/seurat-wrappers')
BiocManager::install("R.utils")
remotes::install_github('satijalab/seurat-wrappers')
BiocManager::install("SingleCellExperiment")
BiocManager::install("slingshot")
BiocManager::install("tidygraph")
BiocManager::install("umap")
BiocManager::install("vanddraabe")
BiocManager::install("viridis")
library("viridis")
BiocManager::install("velocyto")
install.packages("boost")
install_github("velocyto-team/velocyto.R")
devtools::install_github("velocyto-team/velocyto.R")
BiocManager::install("pcaMethods")
devtools::install_github("velocyto-team/velocyto.R")
#search for the patterns which devtools:check complained about. In this case:
#Error: Dependency package(s) 'SeuratObjects','ggplot','stingr' not available.
for(i in 1:length(c)){
for(j in 1:length(c[[i]])){
if(stringr::str_detect(c[[i]][j], "velocyto")){print(paste0(names(c)[i], " line ", c[[i]][j]))}
}
}
#VK 23-6-21
#This is for detecting errors in the function calling. i.e. if a package is spelled wrong e.g. ggplod2::aes
library(stringr)
#get all functions of the package into workspace
source_code_dir <- "C:/Users/vickr/Documents/GitHub/Platypus/R" #dont hate me for my file organisation, github placed the repository there
file_path_vec <- list.files(source_code_dir, full.names = T)
for(f_path in file_path_vec){
#print(f_path)
tryCatch({source(f_path)}, error = function(e){e
})
}
#deparse all functions i.e. get a list of character vectors where each element is a line of a function
c <- list()
n <- 1
for (i in ls()) {
print(i)
a <- get(i)
c[[n]] <- deparse(a)
names(c)[n] <- i
n <- n+1
}
#search for the patterns which devtools:check complained about. In this case:
#Error: Dependency package(s) 'SeuratObjects','ggplot','stingr' not available.
for(i in 1:length(c)){
for(j in 1:length(c[[i]])){
if(stringr::str_detect(c[[i]][j], "rjson")){print(paste0(names(c)[i], " line ", c[[i]][j]))}
}
}
for(i in 1:length(c)){
for(j in 1:length(c[[i]])){
if(stringr::str_detect(c[[i]][j], "dichromate")){print(paste0(names(c)[i], " line ", c[[i]][j]))}
}
}
for(i in 1:length(c)){
for(j in 1:length(c[[i]])){
if(stringr::str_detect(c[[i]][j], "olorRampPalette")){print(paste0(names(c)[i], " line ", c[[i]][j]))}
}
}
library(stringr)
#get all functions of the package into workspace
source_code_dir <- "C:/Users/vickr/Documents/GitHub/Platypus/R" #dont hate me for my file organisation, github placed the repository there
file_path_vec <- list.files(source_code_dir, full.names = T)
for(f_path in file_path_vec){
#print(f_path)
tryCatch({source(f_path)}, error = function(e){e
})
}
#deparse all functions i.e. get a list of character vectors where each element is a line of a function
c <- list()
n <- 1
for (i in ls()) {
print(i)
a <- get(i)
c[[n]] <- deparse(a)
names(c)[n] <- i
n <- n+1
}
#search for the patterns which devtools:check complained about. In this case:
#Error: Dependency package(s) 'SeuratObjects','ggplot','stingr' not available.
for(i in 1:length(c)){
for(j in 1:length(c[[i]])){
if(stringr::str_detect(c[[i]][j], "olorRampPalette")){print(paste0(names(c)[i], " line ", c[[i]][j]))}
}
}
library(stringr)
#get all functions of the package into workspace
source_code_dir <- "C:/Users/vickr/Documents/GitHub/Platypus/R" #dont hate me for my file organisation, github placed the repository there
file_path_vec <- list.files(source_code_dir, full.names = T)
for(f_path in file_path_vec){
print(f_path)
tryCatch({source(f_path)}, error = function(e){e
})
}
library(stringr)
#get all functions of the package into workspace
source_code_dir <- "C:/Users/vickr/Documents/GitHub/Platypus/R" #dont hate me for my file organisation, github placed the repository there
file_path_vec <- list.files(source_code_dir, full.names = T)
for(f_path in file_path_vec){
print(f_path)
tryCatch({source(f_path)}, error = function(e){e
})
}
#deparse all functions i.e. get a list of character vectors where each element is a line of a function
c <- list()
n <- 1
for (i in ls()) {
print(i)
a <- get(i)
c[[n]] <- deparse(a)
names(c)[n] <- i
n <- n+1
}
#search for the patterns which devtools:check complained about. In this case:
#Error: Dependency package(s) 'SeuratObjects','ggplot','stingr' not available.
for(i in 1:length(c)){
for(j in 1:length(c[[i]])){
if(stringr::str_detect(c[[i]][j], "monocle::")){print(paste0(names(c)[i], " line ", c[[i]][j]))}
}
}
#VK 23-6-21
#This is for detecting errors in the function calling. i.e. if a package is spelled wrong e.g. ggplod2::aes
library(stringr)
#get all functions of the package into workspace
source_code_dir <- "C:/Users/vickr/Documents/GitHub/Platypus/R" #dont hate me for my file organisation, github placed the repository there
file_path_vec <- list.files(source_code_dir, full.names = T)
for(f_path in file_path_vec){
print(f_path)
tryCatch({source(f_path)}, error = function(e){e
})
}
#deparse all functions i.e. get a list of character vectors where each element is a line of a function
c <- list()
n <- 1
for (i in ls()) {
print(i)
a <- get(i)
c[[n]] <- deparse(a)
names(c)[n] <- i
n <- n+1
}
#search for the patterns which devtools:check complained about. In this case:
#Error: Dependency package(s) 'SeuratObjects','ggplot','stingr' not available.
for(i in 1:length(c)){
for(j in 1:length(c[[i]])){
if(stringr::str_detect(c[[i]][j], "::ggname")){print(paste0(names(c)[i], " line ", c[[i]][j]))}
}
}
for(i in 1:length(c)){
for(j in 1:length(c[[i]])){
if(stringr::str_detect(c[[i]][j], "vgm_")){print(paste0(names(c)[i], " line ", c[[i]][j]))}
}
}
#VK 23-6-21
#This is for detecting errors in the function calling. i.e. if a package is spelled wrong e.g. ggplod2::aes
library(stringr)
#get all functions of the package into workspace
source_code_dir <- "C:/Users/vickr/Documents/GitHub/Platypus/R" #dont hate me for my file organisation, github placed the repository there
file_path_vec <- list.files(source_code_dir, full.names = T)
for(f_path in file_path_vec){
print(f_path)
tryCatch({source(f_path)}, error = function(e){e
})
}
#deparse all functions i.e. get a list of character vectors where each element is a line of a function
c <- list()
n <- 1
for (i in ls()) {
print(i)
a <- get(i)
c[[n]] <- deparse(a)
names(c)[n] <- i
n <- n+1
}
#search for the patterns which devtools:check complained about. In this case:
#Error: Dependency package(s) 'SeuratObjects','ggplot','stingr' not available.
for(i in 1:length(c)){
for(j in 1:length(c[[i]])){
if(stringr::str_detect(c[[i]][j], ":::ggname")){print(paste0(names(c)[i], " line ", c[[i]][j]))}
}
}
install.packages("rHub")
install.packages("rhub")
library(stringr)
#get all functions of the package into workspace
source_code_dir <- "C:/Users/vickr/Documents/GitHub/Platypus/R" #dont hate me for my file organisation, github placed the repository there
file_path_vec <- list.files(source_code_dir, full.names = T)
for(f_path in file_path_vec){
print(f_path)
tryCatch({source(f_path)}, error = function(e){e
})
}
#deparse all functions i.e. get a list of character vectors where each element is a line of a function
c <- list()
n <- 1
for (i in ls()) {
print(i)
a <- get(i)
c[[n]] <- deparse(a)
names(c)[n] <- i
n <- n+1
}
#search for the patterns which devtools:check complained about. In this case:
#Error: Dependency package(s) 'SeuratObjects','ggplot','stingr' not available.
for(i in 1:length(c)){
for(j in 1:length(c[[i]])){
if(stringr::str_detect(c[[i]][j], "velocyto")){print(paste0(names(c)[i], " line ", c[[i]][j]))}
}
}
#search for the patterns which devtools:check complained about. In this case:
#Error: Dependency package(s) 'SeuratObjects','ggplot','stingr' not available.
for(i in 1:length(c)){
for(j in 1:length(c[[i]])){
if(stringr::str_detect(c[[i]][j], "velocyto::")){print(paste0(names(c)[i], " line ", c[[i]][j]))}
}
}
a <- 1
paste0(a,"abc",a, collapse = "b")
eval(parse('paste0(a,"abc",a, collapse = "b")'))
eval(parse(text = 'paste0(a,"abc",a, collapse = "b")'))
eval(parse(text = 'paste0(a,"abc",a, collapse = "b")'))
eval(parse(text = 'paste0(a,"abc",a,
collapse = "b")'))
rhub::check()
devtools::check(env_vars = c(NOT_CRAN = "false"))
