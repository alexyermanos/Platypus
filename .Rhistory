GEX.heatmap <- Seurat::DoHeatmap(GEX.object,features = toupper(custom.array),cells = holding_cells,label = F,group.by = "clonotype_id",lines.width = 1)
}
return(GEX.heatmap)
}
EX_heatmap(GEX = Platypus::small_vgm[[2]],b.or.t = "b"
,clone.rank.threshold = 30,sample.index = 1)
GEX_heatmap(GEX = Platypus::small_vgm[[2]],b.or.t = "b"
,clone.rank.threshold = 30,sample.index = 1)
small_vgm <- Platypus::small_vgm[[2]]
#' small_vgm[[2]]$clone_rank <- c(1:nrow(small_vgm[[2]]@meta.data))
small_vgm <- Platypus::small_vgm[[2]]
small_vgm[[2]]$clone_rank <- c(1:nrow(small_vgm[[2]]@meta.data))
small_vgm <- Platypus::small_vgm[[2]]
small_vgm[[2]]@meta.data$clone_rank <- c(1:nrow(small_vgm[[2]]@meta.data))
small_vgm <- Platypus::small_vgm
small_vgm[[2]]$clone_rank <- c(1:nrow(small_vgm[[2]]@meta.data))
GEX_heatmap(GEX =small_vgm,b.or.t = "b"
,clone.rank.threshold = 30,sample.index = 1)
GEX_heatmap(GEX =small_vgm[[2]],b.or.t = "b"
,clone.rank.threshold = 30,sample.index = 1)
GEX_heatmap(GEX = Platypus::small_vgm,b.or.t = "b"
,clone.rank.threshold = 30,sample.index = 1
,custom.array = c("CD24A","CD83"))
GEX_heatmap(GEX = small_vgm[[2]],b.or.t = "b"
,clone.rank.threshold = 30,sample.index = 1
,custom.array = c("CD24A","CD83"))
GEX_heatmap(GEX = small_vgm[[2]],b.or.t = "custom"
,clone.rank.threshold = 30,sample.index = 1
,custom.array = c("CD24A","CD83"))
small_vgm[["GEX"]]@assays[["RNA"]]@scale.data
#' @examples
#' \dontrun{
#' #prep the small_vgm sample dataset
#' small_vgm <- Platypus::small_vgm
#' small_vgm[[2]]$clone_rank <- c(1:nrow(small_vgm[[2]]@meta.data))
#' GEX_heatmap(GEX = small_vgm[[2]],b.or.t = "custom"
#' ,clone.rank.threshold = 30,sample.index = 1
#' ,custom.array = c("CD24A","CD83"))
#' }
#'
GEX_heatmap <- function(GEX,b.or.t,sample.index,clone.rank.threshold,custom.array){
GEX.object <- GEX
if(missing(b.or.t)) b.or.t <- "t"
if(missing(custom.array)) custom.array <- c("")
holding_sample_id <- which(GEX.object$sample_id==sample.index)
holding_clone_rank_index <- which(GEX.object$clone_rank<=clone.rank.threshold)
holding_cells <- intersect(holding_sample_id,holding_clone_rank_index)
if(b.or.t=="b"){
GEX.heatmap <- Seurat::DoHeatmap(GEX.object,features = c("CD74","CD79A","FCER2","TMSB10","BTG1","BACH2","MEF2C","HVCN1","SARAF","CXCR4","FCRL1","CD72","NCF1","AIM2","CRIP1","CD82","ITGB1","CD24","PTPRC","CD19","CD27","CD38","SDC1","CD22","FAS","TNFRSF13B","IL4R","XBP1"),cells = holding_cells,label = F,group.by = "clone_rank",lines.width = 1)
}
else if(b.or.t=="t"){
GEX.heatmap <- Seurat::DoHeatmap(GEX.object,features = c("CD3E","CD8A","CD4","IL7R","CCL5","GZMA","GZMK","GZMB","PRF1","NKG7","SELL","TNFRSF13B","TBX1","PDCD1","ITGAE","LAG3","CD44","ICOS","CX3CR1","MKI67","TCF7","CST7","GNLY","CXCR5","EOMES"),cells = holding_cells,label = F,group.by = "clone_rank",lines.width = 1)
}
else if(b.or.t=="custom"){
GEX.heatmap <- Seurat::DoHeatmap(GEX.object,features = custom.array,cells = holding_cells,label = F,group.by = "clonotype_id",lines.width = 1)
}
return(GEX.heatmap)
}
GEX_heatmap(GEX = small_vgm[[2]],b.or.t = "custom"
,clone.rank.threshold = 30,sample.index = 1
,custom.array = c("CD24A","CD83"))
#' @examples
#' \dontrun{
#' #prep the small_vgm sample dataset
#' small_vgm <- Platypus::small_vgm
#' small_vgm[[2]]$clone_rank <- c(1:nrow(small_vgm[[2]]@meta.data))
#' GEX_heatmap(GEX = small_vgm[[2]],b.or.t = "custom"
#' ,clone.rank.threshold = 30,sample.index = 1
#' ,custom.array = c("CD24A","CD83"))
#' }
#'
GEX_heatmap <- function(GEX,b.or.t,sample.index,clone.rank.threshold,custom.array, slot){
GEX.object <- GEX
if(missing(b.or.t)) b.or.t <- "t"
if(missing(slot)) slot <- "scale.data"
if(missing(custom.array)) custom.array <- c("")
holding_sample_id <- which(GEX.object$sample_id==sample.index)
holding_clone_rank_index <- which(GEX.object$clone_rank<=clone.rank.threshold)
holding_cells <- intersect(holding_sample_id,holding_clone_rank_index)
if(b.or.t=="b"){
GEX.heatmap <- Seurat::DoHeatmap(GEX.object,features = c("CD74","CD79A","FCER2","TMSB10","BTG1","BACH2","MEF2C","HVCN1","SARAF","CXCR4","FCRL1","CD72","NCF1","AIM2","CRIP1","CD82","ITGB1","CD24","PTPRC","CD19","CD27","CD38","SDC1","CD22","FAS","TNFRSF13B","IL4R","XBP1"),cells = holding_cells,label = F,group.by = "clone_rank",lines.width = 1, slot = slot)
}
else if(b.or.t=="t"){
GEX.heatmap <- Seurat::DoHeatmap(GEX.object,features = c("CD3E","CD8A","CD4","IL7R","CCL5","GZMA","GZMK","GZMB","PRF1","NKG7","SELL","TNFRSF13B","TBX1","PDCD1","ITGAE","LAG3","CD44","ICOS","CX3CR1","MKI67","TCF7","CST7","GNLY","CXCR5","EOMES"),cells = holding_cells,label = F,group.by = "clone_rank",lines.width = 1, slot = slot)
}
else if(b.or.t=="custom"){
GEX.heatmap <- Seurat::DoHeatmap(GEX.object,features = custom.array,cells = holding_cells,label = F,group.by = "clonotype_id",lines.width = 1, slot = slot)
}
return(GEX.heatmap)
}
GEX_heatmap(GEX = small_vgm[[2]],b.or.t = "custom"
,clone.rank.threshold = 30,sample.index = 1
,custom.array = c("CD24A","CD83"))
GEX_heatmap(GEX = small_vgm[[2]],b.or.t = "custom"
,clone.rank.threshold = 30,sample.index = 1
,custom.array = c("CD24A","CD83"), slot = "data")
GEX_heatmap(GEX = small_vgm[[2]],b.or.t = "custom"
,clone.rank.threshold = 1,sample.index = 1
,custom.array = c("CD24A","CD83"), slot = "data")
#' @examples
#' \dontrun{
#' #prep the small_vgm sample dataset
#' small_vgm <- Platypus::small_vgm
#' small_vgm[[2]]$clone_rank <- c(1:nrow(small_vgm[[2]]@meta.data))
#' GEX_heatmap(GEX = small_vgm[[2]],b.or.t = "custom"
#' ,clone.rank.threshold = 1,sample.index = 1
#' ,custom.array = c("CD24A","CD83"), slot = "data")
#' }
#'
GEX_heatmap <- function(GEX,b.or.t,sample.index,clone.rank.threshold,custom.array, slot){
GEX.object <- GEX
if(missing(b.or.t)) b.or.t <- "t"
if(missing(slot)) slot <- "scale.data"
if(missing(custom.array)) custom.array <- c("")
holding_sample_id <- which(GEX.object$sample_id==sample.index)
holding_clone_rank_index <- which(GEX.object$clone_rank<=clone.rank.threshold)
holding_cells <- intersect(holding_sample_id,holding_clone_rank_index)
if(b.or.t=="b"){
GEX.heatmap <- Seurat::DoHeatmap(GEX.object,features = c("CD74","CD79A","FCER2","TMSB10","BTG1","BACH2","MEF2C","HVCN1","SARAF","CXCR4","FCRL1","CD72","NCF1","AIM2","CRIP1","CD82","ITGB1","CD24","PTPRC","CD19","CD27","CD38","SDC1","CD22","FAS","TNFRSF13B","IL4R","XBP1"),cells = holding_cells,label = F,group.by = "clone_rank",lines.width = 1, slot = slot)
}
else if(b.or.t=="t"){
GEX.heatmap <- Seurat::DoHeatmap(GEX.object,features = c("CD3E","CD8A","CD4","IL7R","CCL5","GZMA","GZMK","GZMB","PRF1","NKG7","SELL","TNFRSF13B","TBX1","PDCD1","ITGAE","LAG3","CD44","ICOS","CX3CR1","MKI67","TCF7","CST7","GNLY","CXCR5","EOMES"),cells = holding_cells,label = F,group.by = "clone_rank",lines.width = 1, slot = slot)
}
else if(b.or.t=="custom"){
GEX.heatmap <- Seurat::DoHeatmap(GEX.object,features = custom.array,cells = holding_cells,label = F,group.by = "clone_rank",lines.width = 1, slot = slot)
}
return(GEX.heatmap)
}
GEX_heatmap(GEX = small_vgm[[2]],b.or.t = "custom"
,clone.rank.threshold = 1,sample.index = 1
,custom.array = c("CD24A","CD83"), slot = "data")
GEX_heatmap(GEX = small_vgm[[2]],b.or.t = "custom"
,clone.rank.threshold = 1,sample.index = "s1"
,custom.array = c("CD24A","CD83"), slot = "data")
GEX_DEgenes(GEX = Platypus::small_vgm[[2]],min.pct = .25,
#' group1 = "s1",group2 = "s2")
)
GEX_DEgenes(GEX = Platypus::small_vgm[[2]],min.pct = .25,
group1 = "s1",group2 = "s2")
devtools::check(run_dont_test = F)
devtools::check(run_dont_test = F, cran = F)
source_code_dir <- "C:/Dokumente usw/Master/Reddy Lab/1_thesis/3_code/4_DB project/Platypus_3_1_CRAN_submission/R"
file_path_vec <- list.files(source_code_dir, full.names = T)
for(f_path in file_path_vec){
print(f_path)
tryCatch({source(f_path)}, error = function(e){e})
}
gc()
View(AbForests_AntibodyForest)
View(AbForests_CompareForests)
View(AbForests_CsvToDf)
View(AbForests_ConvertStructure)
View(AbForests_ForestMetrics)
View(AbForests_PlotGraphs)
View(AbForests_PlyloToMatrix)
View(AbForests_RemoveNets)
View(AbForests_SubRepertoiresByCells)
View(AbForests_SubRepertoiresByCells)
View(AbForests_SubRepertoiresByUniqueSeq)
View(AbForests_UniqueAntibodyVariants)
View(AbForests_UniqueAntibodyVariants)
View(automate_GEX)
View(call_MIXCR)
View(clonofreq)
View(clonofreq.isotype.data)
View(Echidna_vae_generate)
View(get.avr.mut.data)
View(GEX_automate)
View(GEX_clonotype)
View(GEX_cluster_genes)
View(GEX_cluster_genes_heatmap)
View(GEX_coexpression_coefficient)
View(GEX_cluster_membership)
View(GEX_DEgenes)
View(GEX_DEgenes_persample)
View(GEX_dottile_plot)
View(GEX_GOterm)
View(GEX_dottile_plot)
View(GEX_GSEA)
View(GEX_heatmap)
View(GEX_pairwise_DEGs)
View(GEX_phenotype)
View(GEX_proportions_barplot)
View(GEX_scatter_coexpression)
View(GEX_topN_DE_genes_per_cluster)
View(GEX_visualize_clones)
View(GEX_volcano)
View(GEX_volcano)
View(no.empty.node)
View(PlatypusDB_AIRR_to_VGM)
View(PlatypusDB_fetch)
View(PlatypusDB_find_CDR3s)
View(PlatypusDB_list_projects)
View(PlatypusDB_load_from_disk)
View(PlatypusDB_VGM_to_AIRR)
View(simulate_repertoire)
View(umap.top.highlight)
View(VDJ_alpha_beta_Vgene_circos)
View(VDJ_analyze)
View(VDJ_assemble_for_PnP)
View(VDJ_call_MIXCR)
View(VDJ_circos)
View(VDJ_clonal_donut)
View(VDJ_clonal_expansion)
View(VDJ_clonal_lineages)
View(VDJ_clonotype)
View(VDJ_clonotype_clusters_circos)
View(VDJ_contigs_to_vgm)
View(VDJ_diversity)
View(VDJ_dublets)
View(VDJ_extract_germline)
View(VDJ_GEX_clonal_lineage_clusters)
View(VDJ_GEX_expansion)
View(VDJ_GEX_integrate)
View(VDJ_GEX_matrix)
View(VDJ_GEX_overlay_clones)
View(VDJ_GEX_stats)
View(VDJ_isotypes_per_clone)
View(VDJ_logoplot_vector)
View(VDJ_network)
View(VDJ_overlap_heatmap)
View(VDJ_per_clone)
View(VDJ_plot_SHM)
View(VDJ_reclonotype_list_arrange)
View(VDJ_tree)
View(VDJ_variants_per_clone)
View(VDJ_Vgene_usage)
View(VDJ_Vgene_usage_barplot)
View(VDJ_Vgene_usage_stacked_barplot)
View(VDJ_VJ_usage_circos)
library(stringr)
#get all functions of the package into workspace
source_code_dir <- "C:/Dokumente usw/Master/Reddy Lab/1_thesis/3_code/4_DB project/Platypus_3_1_CRAN_submission/R" #dont hate me for my file organisation, github placed the repository there
file_path_vec <- list.files(source_code_dir, full.names = T)
for(f_path in file_path_vec){
#print(f_path)
tryCatch({source(f_path)}, error = function(e){e
})
}
#deparse all functions i.e. get a list of character vectors where each element is a line of a function
c <- list()
n <- 1
for (i in ls()) {
print(i)
a <- get(i)
c[[n]] <- deparse(a)
names(c)[n] <- i
n <- n+1
}
#search for the patterns which devtools:check complained about. In this case:
#Error: Dependency package(s) 'SeuratObjects','ggplot','stingr' not available.
for(i in 1:length(c)){
for(j in 1:length(c[[i]])){
if(stringr::str_detect(c[[i]][j], "knitr::")){print(paste0(names(c)[i], " line ", c[[i]][j]))}
if(stringr::str_detect(c[[i]][j], "do::")){print(paste0(names(c)[i], " line ", c[[i]][j]))}
if(stringr::str_detect(c[[i]][j], "rmarkdown")){print(paste0(names(c)[i], " line ", c[[i]][j]))}
}
}
devtools::check(cran = F, run_dont_test = F)
devtools::check(cran = F, run_dont_test = F)
View(VDJ_GEX_overlay_clones)
devtools::check(cran = F, run_dont_test = F)
View(VDJ_clonal_expansion)
devtools::check(cran = F, run_dont_test = F)
devtools::check(cran = F, run_dont_test = F)
View(GEX_DEgenes)
devtools::check(cran = F, run_dont_test = F)
View(GEX_DEgenes)
library(Platypus)
GEX_DEgenes(GEX = Platypus::small_vgm[[2]],min.pct = .25,
group1 = "s1",group2 = "s2")
GEX_DEgenes(GEX = Platypus::small_vgm[[2]],min.pct = .25,
group1 = "s1",group2 = "s3")
GEX_DEgenes(GEX = Platypus::small_vgm[[2]],min.pct = .25,
group1 = "s1",group2 = "s2")
DE_genes <- GEX_DEgenes(GEX = Platypus::small_vgm[[2]],min.pct = .25,
group1 = "s1",group2 = "s2")
devtools::check(cran = F, run_dont_test = F)
library(Platypus)
VDJ_diversity(VDJ = Platypus::small_vgm[[1]], platypus.version = "v3"
,feature.columns = c("VDJ_cdr3s_aa","VJ_cdr3s_aa"), grouping.column = "sample_id"
,metric = c("ginisimpson","simpson"))
rhub::check_for_cran()
rhub::check_for_cran()
rhub::check()
setwd("C:/Dokumente usw/Master/Reddy Lab/1_thesis/4_processed data/9_T and B n3 paper")
vgm_b <- readRDS("EAE_vgm_b.rds")
small_vgm <- vgm_b
small_vgm[[1]] <- sample_n(small_vgm[[1]],size = 50)
library(tidyverse)
small_vgm <- vgm_b
small_vgm[[1]] <- sample_n(small_vgm[[1]],size = 50)
#filter gex cells
small_vgm[[2]] <- subset(small_vgm[[2]], cells = colnames(small_vgm[[2]])[which(colnames(small_vgm[[2]]) %in% small_vgm[[1]]$barcode)])
mat <- small_vgm[[2]]@assays$RNA@counts
small_mat <- mat[which(rownames(mat)%in% c("CD19", "CD24A", "CD83")),]
small_vgm[[2]]@assays$RNA@counts <- small_mat
mat <- small_vgm[[2]]@assays$RNA@data
small_mat <- mat[which(rownames(mat)%in% c("CD19", "CD24A", "CD83")),]
small_vgm[[2]]@assays$RNA@data <- small_mat
Seurat::FeaturePlot(small_vgm[[2]], features = "CD19", slot = "data")
small_vgm[[2]]@assays$RNA@scale.data <- matrix(rep(0,30), nrow = 3)
small_vgm[[2]]@assays$RNA@var.features <- c("CD19", "CD24A", "CD83")
small_vgm[[2]]@assays$RNA@meta.features <- data.frame()
small_vgm[[2]]@reductions$pca <- "omitted"
small_vgm[[2]]@reductions$tsne <- "omitted"
small_vgm[[2]]@version <- package_version("1.0")
small_vgm[[3]] <- "omitted"
small_vgm[[4]] <- "omitted"
small_vgm[[5]] <- "omitted"
small_vgm[[2]]$sample_id[1:7] <- "s1"
small_vgm[[2]]$sample_id[8:13] <- "s2"
small_vgm[[2]]$seurat_clusters[1:7] <- 0
small_vgm[[2]]$seurat_clusters[8:13] <- 1
save(small_vgm, file = "small_vgm.rda")
library(Platypus)
a <- VDJ_alpha_beta_Vgene_circos(VDJ = small_vgm[[1]])
a <- VDJ_alpha_beta_Vgene_circos(VDJ = small_vgm[[1]], platypus.version = "v3")
AntibodyForest(full_list,csv=FALSE, files,custom_mat=NULL,clonal_frequency=TRUE,
#' scaleByClonalFreq=TRUE,weight=TRUE,tie_flag='close_to_germ',
#' scaleBybetweenness=FALSE,scaleByclocloseness_metr=FALSE,
#' opt="cluster",seed=165,alg_opt="0",cdr3=NULL)
)))
AntibodyForest(full_list,csv=FALSE, files,custom_mat=NULL,clonal_frequency=TRUE,
scaleByClonalFreq=TRUE,weight=TRUE,tie_flag='close_to_germ',
scaleBybetweenness=FALSE,scaleByclocloseness_metr=FALSE,
opt="cluster",seed=165,alg_opt="0",cdr3=NULL)
ABForests_AntibodyForest(full_list,csv=FALSE, files,custom_mat=NULL,clonal_frequency=TRUE,
scaleByClonalFreq=TRUE,weight=TRUE,tie_flag='close_to_germ',
scaleBybetweenness=FALSE,scaleByclocloseness_metr=FALSE,
opt="cluster",seed=165,alg_opt="0",cdr3=NULL)
AbForests_AntibodyForest(full_list)
AbForests_AntibodyForest()
load("C:/Dokumente usw/Master/Reddy Lab/1_thesis/3_code/4_DB project/Platypus_3_1_CRAN_submission/data/ABForests_sysdata.rda")
remove.packages("Platypus")
install.packages("C:/Dokumente usw/Master/Reddy Lab/1_thesis/3_code/4_DB project/Platypus_3.2.2.tar.gz", repos = NULL, type = "source")
install.packages("C:/Dokumente usw/Master/Reddy Lab/1_thesis/3_code/4_DB project/Platypus_3.2.2.tar.gz", repos = NULL, type = "source")
ABForest_AntibodyForest(full_list = Platypus::new,csv=FALSE, files,custom_mat=NULL,clonal_frequency=TRUE,
scaleByClonalFreq=TRUE,weight=TRUE,tie_flag='close_to_germ',
scaleBybetweenness=FALSE,scaleByclocloseness_metr=FALSE,
opt="cluster",seed=165,alg_opt="0",cdr3=NULL)
ABForests_AntibodyForest(full_list = Platypus::new,csv=FALSE, files,custom_mat=NULL,clonal_frequency=TRUE,
scaleByClonalFreq=TRUE,weight=TRUE,tie_flag='close_to_germ',
scaleBybetweenness=FALSE,scaleByclocloseness_metr=FALSE,
opt="cluster",seed=165,alg_opt="0",cdr3=NULL)
AbForest_AntibodyForest(full_list = Platypus::new,csv=FALSE, files,custom_mat=NULL,clonal_frequency=TRUE,
scaleByClonalFreq=TRUE,weight=TRUE,tie_flag='close_to_germ',
scaleBybetweenness=FALSE,scaleByclocloseness_metr=FALSE,
opt="cluster",seed=165,alg_opt="0",cdr3=NULL)
AbForests_AntibodyForest(full_list = Platypus::new,csv=FALSE, files,custom_mat=NULL,clonal_frequency=TRUE,
scaleByClonalFreq=TRUE,weight=TRUE,tie_flag='close_to_germ',
scaleBybetweenness=FALSE,scaleByclocloseness_metr=FALSE,
opt="cluster",seed=165,alg_opt="0",cdr3=NULL)
AbForests_AntibodyForest(full_list = Platypus::new,csv=FALSE, files,custom_mat=NULL,clonal_frequency=TRUE,
scaleByClonalFreq=TRUE,weight=TRUE,tie_flag='close_to_germ',
scaleBybetweenness=FALSE,scaleByclocloseness_metr=FALSE,
opt="cluster",seed=165,alg_opt="0",cdr3=NULL)
library(Platypus)
AbForests_AntibodyForest(full_list = Platypus::new,csv=FALSE, files,custom_mat=NULL,clonal_frequency=TRUE,
scaleByClonalFreq=TRUE,weight=TRUE,tie_flag='close_to_germ',
scaleBybetweenness=FALSE,scaleByclocloseness_metr=FALSE,
opt="cluster",seed=165,alg_opt="0",cdr3=NULL)
AbForests_AntibodyForest(full_list = Platypus::new,csv=FALSE, files,clonal_frequency=TRUE,
scaleByClonalFreq=TRUE,weight=TRUE,tie_flag='close_to_germ',
scaleBybetweenness=FALSE,scaleByclocloseness_metr=FALSE,
opt="cluster",alg_opt="0",cdr3=NULL)
cluster_defining_gene_heatmap <- GEX_cluster_genes_heatmap(GEX = VDJ_GEX_matrix.output[[2]]
,GEX_cluster_genes.output=GEX_cluster_genes_output
,n.genes.per.cluster=5,metric="p.value",max.cell=5)
GEX_cluster_genes_output <- GEX_cluster_genes(GEX = Platypus::small_vgm[[2]])
GEX_cluster_genes_output <- GEX_cluster_genes(GEX = Platypus::small_vgm[[2]])
GEX_cluster_genes_output <- GEX_cluster_genes(GEX = Platypus::small_vgm[[2]])
table(small_vgm[[2]]$seurat_clusters)
GEX_cluster_genes_output <- GEX_cluster_genes(GEX = subset(Platypus::small_vgm[[2]], seurat_clusters %in% c(0,1)))
cluster_defining_gene_heatmap <- GEX_cluster_genes_heatmap(GEX = subset(Platypus::small_vgm[[2]], seurat_clusters %in% c(0,1))
,GEX_cluster_genes.output=GEX_cluster_genes_output
,n.genes.per.cluster=5,metric="p.value",max.cell=5)
#' ,n.genes.per.cluster=5,metric="p.value",max.cell=5)
#'
#' #For Platypus version 3
#' GEX_cluster_genes_output <- GEX_cluster_genes(GEX = subset(
#' Platypus::small_vgm[[2]], seurat_clusters %in% c(0,1)))
#'
#' cluster_defining_gene_heatmap <- GEX_cluster_genes_heatmap(GEX = VDJ_GEX_matrix.output[[2]]
#' ,GEX_cluster_genes.output=GEX_cluster_genes_output
#' ,n.genes.per.cluster=5,metric="p.value",max.cell=5)
#'}
GEX_cluster_genes_heatmap <- function(GEX,
GEX_cluster_genes.output,
n.genes.per.cluster,
metric,
max.cell,
group.colors,
slot,
platypus.version){
platypus.version <- "does not matter"
if(missing(max.cell)) max.cell <- 100
if(missing(n.genes.per.cluster)) n.genes.per.cluster <- 5
if(missing(metric)) metric <- "p.value"
if(missing(group.colors)) group.colors <- grDevices::rainbow(length(GEX_cluster_genes.output))
if(missing(slot)) slot <- "counts"
#rename in case of naming change
if(any("avg_log2FC" %in% names(GEX_cluster_genes.output[[1]]))){
fc_col <- which(names(GEX_cluster_genes.output[[1]]) == "avg_log2FC")
for(i in 1:length(GEX_cluster_genes.output)){
names(GEX_cluster_genes.output[[i]])[fc_col] <- "avg_logFC"
}
}
holding_genes <- list()
for(i in 1:length(GEX_cluster_genes.output)){
if(metric=="p.value") holding_genes[[i]] <- rownames(GEX_cluster_genes.output[[i]][order(GEX_cluster_genes.output[[i]]$p_val_adj, decreasing = FALSE),])[1:n.genes.per.cluster]
else if(metric=="avg_logFC") holding_genes[[i]] <- rownames(GEX_cluster_genes.output[[i]][order(abs(GEX_cluster_genes.output[[i]]$avg_logFC), decreasing = TRUE),])[1:n.genes.per.cluster]
else if(metric=="top_logFC") holding_genes[[i]] <- rownames(GEX_cluster_genes.output[[i]][order((GEX_cluster_genes.output[[i]]$avg_logFC), decreasing = TRUE),])[1:n.genes.per.cluster]
else if(metric=="bottom_logFC") holding_genes[[i]] <- rownames(GEX_cluster_genes.output[[i]][order((GEX_cluster_genes.output[[i]]$avg_logFC), decreasing = FALSE),])[1:n.genes.per.cluster]
}
## Sample cells if too many
sample_cells <- list()
unique_clusters <- sort(unique(GEX$seurat_clusters),decreasing = F)
for(i in 1:length(unique_clusters)){
if(length(which(GEX$seurat_clusters==unique_clusters[i]))>max.cell){
sample_cells[[i]] <- sample(which(GEX$seurat_clusters==unique_clusters[i]),size = max.cell,replace = F)
}
else{
sample_cells[[i]] <- which(GEX$seurat_clusters==unique_clusters[i])
}
}
output_heatmap <- Seurat::DoHeatmap(GEX,features = unlist(unique(holding_genes)),cells = unlist(sample_cells), group.colors = group.colors, slot = slot)
return(output_heatmap)
}
cluster_defining_gene_heatmap <- GEX_cluster_genes_heatmap(GEX = subset(Platypus::small_vgm[[2]], seurat_clusters %in% c(0,1))
,GEX_cluster_genes.output=GEX_cluster_genes_output
,n.genes.per.cluster=5,metric="p.value",max.cell=5)
cluster_defining_gene_heatmap <- GEX_cluster_genes_heatmap(GEX = subset(Platypus::small_vgm[[2]], seurat_clusters %in% c(0,1))
,GEX_cluster_genes.output=GEX_cluster_genes_output
,n.genes.per.cluster=5,metric="p.value",max.cell=5, slot = "counts")
cluster_defining_gene_heatmap <- GEX_cluster_genes_heatmap(GEX = subset(Platypus::small_vgm[[2]], seurat_clusters %in% c(0,1))
,GEX_cluster_genes.output=GEX_cluster_genes_output
,n.genes.per.cluster=5,metric="p.value",max.cell=5, slot = "scale.data")
View(GEX_cluster_genes_output)
GEX_cluster_genes(GEX = Platypus::small_vgm[[2]], min.pct = .25
#' , filter = c("MT-", "RPL", "RPS"))
))
GEX_cluster_genes(GEX = Platypus::small_vgm[[2]], min.pct = .25
, filter = c("MT-", "RPL", "RPS"))
GEX_cluster_genes(GEX = subset(Platypus::small_vgm[[2]], seurat_clusters %in% c(1,2)), min.pct = .25
, filter = c("MT-", "RPL", "RPS"))
GEX_cluster_genes(GEX = subset(Platypus::small_vgm[[2]], seurat_clusters %in% c(0,1)), min.pct = .25
, filter = c("MT-", "RPL", "RPS"))
a <- PlatypusDB_fetch(PlatypusDB.links = c("Kuhn2021a//ALL")
,save.to.disk = TRUE,load.to.enviroment = TRUE, load.to.list = FALSE
, combine.object = TRUE,path.to.save = "~/Platy_downloads")
PlatypusDB_fetch(PlatypusDB.links = c("Kuhn2021a//ALL")
,save.to.disk = FALSE,load.to.enviroment = TRUE, load.to.list = FALSE
, combine.object = TRUE,path.to.save = "/Downloads")
names(PlatypusDB_list_projects())
list_of_metadata_tables <- PlatypusDB_fetch(
PlatypusDB.links = c("Kuhn2021a//metadata")
,save.to.disk = FALSE,load.to.enviroment = FALSE, load.to.list = TRUE)
public_clones <- PlatypusDB_find_CDR3s(VDJ.cdr3s.aa = "CMRYGNYWYFDVW"
#' , VJ.cdr3s.aa = "CLQHGESPFTF", projects.to.search = "Kreiner2021b")
)
))
PlatypusDB_projects <- PlatypusDB_list_projects()
View(PlatypusDB_projects[["Yermanos2021a"]])
View(PlatypusDB_projects[["Kuhn2021a"]])
print(PlatypusDB_projects[["Kuhn2021a"]])
plots <- VDJ_alpha_beta_Vgene_circos(Platypus::small_vgm[[1]]
, sample_id == "s1", platypus.version="v3")
plots <- VDJ_alpha_beta_Vgene_circos(Platypus::small_vgm[[1]], platypus.version="v3")
VDJ_clonotype_clusters_circos(Platypus::small_vgm[[1]], topX=100, label.threshold=5
, platypus.version = "v3", n_cluster = 2)
small_vgm <- Platypus::small_vgm
small_vgm[[1]]$clonotype_id_10x <- "clonotype1"
small_vgm[[1]]$clonotype_frequency <- nrow(small_vgm[[1]])
VDJ_clonotype_clusters_circos(Platypus::small_vgm[[1]], topX=100, label.threshold=5
, platypus.version = "v3", n_cluster = 2)
VDJ_clonotype_clusters_circos(small_vgm[[1]], topX=100, label.threshold=5
+ , platypus.version = "v3", n_cluster = 2)
VDJ_clonotype_clusters_circos(small_vgm[[1]], topX=100, label.threshold=5
, platypus.version = "v3", n_cluster = 2)
VDJ_diversity(VDJ = Platypus::small_vgm[[1]], platypus.version = "v3"
,feature.columns = c("VDJ_jgene"), grouping.column = "sample_id"
,metric = "jaccard")
VDJ_diversity(VDJ = Platypus::small_vgm[[1]], platypus.version = "v3"
,feature.columns = c("VDJ_cdr3s_aa","VJ_cdr3s_aa"), grouping.column = "sample_id"
,metric = c("ginisimpson"))
VDJ_Vgene_usage_barplot(VDJ = Platypus::small_vgm[[1]],
HC.gene.number = 2, platypus.version = "v3")
plots <- VDJ_VJ_usage_circos(VDJ = Platypus::small_vgm[[1]], platypus.version = "v3")
plots <- VDJ_VJ_usage_circos(VDJ = Platypus::small_vgm[[1]], platypus.version = "v3",
cell.level = T)
GEX_cluster_genes(GEX = subset(Platypus::small_vgm[[2]], seurat_clusters %in% c(0,1)), min.pct = .25
, filter = c("MT-", "RPL", "RPS"))
GEX_pairwise_DEGs(GEX = Platypus::small_vgm[[2]],group.by = "sample_id"
,min.pct = 0.25,RP.MT.filter = TRUE,label.n.top.genes = 2,genes.to.label = c("CD24A")
,save.plot = FALSE)
plots <- VDJ_alpha_beta_Vgene_circos(Platypus::small_vgm[[1]]
, platypus.version="v3")
barcode_overlap <- VDJ_overlap_heatmap(VDJ = Platypus::small_vgm[[1]]
,feature.columns = c("VDJ_cdr3s_aa"),
grouping.column = "sample_id", axis.label.size = 15)
barcode_overlap <- VDJ_overlap_heatmap(VDJ = Platypus::small_vgm[[1]]
,feature.columns = c("VDJ_cdr3s_aa"),
grouping.column = "sample_id", axis.label.size = 15)
overlap <- VDJ_overlap_heatmap(VDJ = Platypus::small_vgm[[1]]
,feature.columns = c("VDJ_cdr3s_aa"),
grouping.column = "sample_id", axis.label.size = 15)
overlap <- VDJ_overlap_heatmap(VDJ = Platypus::small_vgm[[1]]
,feature.columns = c("VDJ_cdr3s_aa"),
grouping.column = "sample_id", axis.label.size = 15, plot.type = "ggplot")
rhub::check()
devtools::build(vignettes = FALSE)
