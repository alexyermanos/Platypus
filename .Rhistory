print(agedCNS_heatmap_clusters)
agedCNS_heatmap_volcano <- GEX_volcano(DEGs.input = gene_expression_cluster[[1]], input.type = "cluster.genes", RP.MT.filter = T, color.p.threshold = 0.01, n.label.up = 10, n.label.down = 10)
print(agedCNS_heatmap_volcano[[1]]) #genes specific to cluster 0
DE_genes_samples <- GEX_DEgenes(GEX = vgm[[2]],min.pct = .25, grouping.column = "sample_id",group1 = "s1", group2 = "s2",return.plot = "volcano",up.genes = 5,down.genes = 5,logFC = F)
DE_genes_samples <- GEX_DEgenes(GEX = vgm[[2]],min.pct = .25, grouping.column = "sample_id",group1 = "s1", group2 = "s2",return.plot = "volcano",up.genes = 5,down.genes = 5,logFC = F)
source("C:/Dokumente usw/Master/Reddy Lab/1_thesis/3_code/4_DB project/PlatypusDB_admin/R/GEX_DEgenes.R")
DE_genes_samples <- GEX_DEgenes(GEX = vgm[[2]],min.pct = .25, grouping.column = "sample_id",group1 = "s1", group2 = "s2",return.plot = "volcano",up.genes = 5,down.genes = 5,logFC = F)
source("C:/Dokumente usw/Master/Reddy Lab/1_thesis/3_code/4_DB project/PlatypusDB_admin/R/GEX_DEgenes.R")
DE_genes_samples <- GEX_DEgenes(GEX = vgm[[2]],min.pct = .25, grouping.column = "sample_id",group1 = "s1", group2 = "s2",return.plot = "volcano",up.genes = 5,down.genes = 5,logFC = F)
DE_genes_cl1_vs_3 <- GEX_DEgenes(GEX= vgm[[2]],min.pct = .25, grouping.column = "seurat_clusters",group1 = "1", group2 = "3",return.plot = "heatmap",up.genes = 10,down.genes = 10,logFC = F, size.top.colorbar = 5)
cat(" Cell count by number of VDJ chains")
print(table(vgm[[1]]$Nr_of_VDJ_chains))
cat("\n Cell count by number of VJ chains")
print(table(vgm[[1]]$Nr_of_VJ_chains))
#Subset the VGM matrix to only include cells with 1 VDJ and 1 VJ chain
#vgm[[1]] <- subset(vgm[[1]], Nr_of_VDJ_chains == 1 & Nr_of_VJ_chains == 1)
gsea_EAE <- GEX_GSEA(GEX.cluster.genes.output = gene_expression_cluster[[1]], MT.Rb.filter = T, path.to.pathways = "~/Downloads/c7.all.v7.4.symbols.gmt")
source("C:/Dokumente usw/Master/Reddy Lab/1_thesis/3_code/4_DB project/PlatypusDB_admin/R/GEX_GSEA.R")
gsea_EAE <- GEX_GSEA(GEX.cluster.genes.output = gene_expression_cluster[[1]], MT.Rb.filter = T, path.to.pathways = "~/Downloads/c7.all.v7.4.symbols.gmt")
print(colnames(vgm[[1]]))
print(unique(vgm[[1]]$VDJ_cgene))
cat(" Cell count by number of VDJ chains")
print(table(vgm[[1]]$Nr_of_VDJ_chains))
cat("\n Cell count by number of VJ chains")
print(table(vgm[[1]]$Nr_of_VJ_chains))
#Subset the VGM matrix to only include cells with 1 VDJ and 1 VJ chain
#vgm[[1]] <- subset(vgm[[1]], Nr_of_VDJ_chains == 1 & Nr_of_VJ_chains == 1)
vgm[[1]] <- VDJ_clonotype_v3(VDJ = vgm[[1]], clone.strategy = "cdr3.aa", global.clonotype = F, VDJ.VJ.1chain = F, hierarchical = "single.chains")
cat(" Nr and distribution of clonotypes using exact CDR3.aa matching \n")
print(length(unique(vgm[[1]]$clonotype_id_cdr3.aa)))
print(table(vgm[[1]]$clonotype_frequency_cdr3.aa)) #Check distribution of clonotypes with identical CDR3 aa sequences
vgm[[1]] <- VDJ_clonotype_v3(VDJ = vgm[[1]], clone.strategy = "VDJJ.VJJ", global.clonotype = F, VDJ.VJ.1chain = F, hierarchical = "double.and.single.chains", triple.chain.count.threshold = 4)
cat("\n Nr and distribution of clonotypes using germline gene matching \n ")
print(length(unique(vgm[[1]]$clonotype_id_VDJJ.VJJ)))
print(table(vgm[[1]]$clonotype_frequency_VDJJ.VJJ)) #Check distribution of clonotypes with identical germline genes
#Shannon Evenness for the VDJ chain CDR3
diversity_plot <- VDJ_diversity(VDJ = vgm[[1]],feature.columns = c("VDJ_cdr3s_aa"),grouping.column = "sample_id",metric = c("shannonevenness"), platypus.version = "v3", subsample.to.same.n = T)
diversity_plot
#Gini-Simpson index for pasted VDJ and VJ chain CDR3s
diversity_plot <- VDJ_diversity(VDJ = vgm[[1]],feature.columns = c("VDJ_cdr3s_aa", "VJ_cdr3s_aa"),grouping.column = "sample_id",metric = c("ginisimpson"), platypus.version = "v3", subsample.to.same.n = T)
diversity_plot
#exact values can be retrived as
print(head(diversity_plot$data))
#Jaccard index between repertoires of the two samples
diversity_plot <- VDJ_diversity(VDJ = vgm[[1]],feature.columns = c("VDJ_cgene"),grouping.column = "sample_id",metric = c("jaccard"), platypus.version = "v3", subsample.to.same.n = T)
diversity_plot
clonal_out <- VDJ_clonal_expansion(VDJ = vgm[[1]],celltype = "Bcells",clones = "30", group.by = "sample_id", color.by = "isotype", isotypes.to.plot = "all", treat.incomplete.clones = "exclude", treat.incomplete.cells = "proportional")
#group by specifies how many separate plots should be generated. If vgm contains global clonotype information this can be set to "none"
print(clonal_out[[1]][[1]]) #Plot sample 1
#print(clonal_out[[2]][[1]]) #Formatted data for plot sample 1
source("C:/Dokumente usw/Master/Reddy Lab/1_thesis/3_code/4_DB project/PlatypusDB_admin/R/VGM_expanded_clones.R")
source("C:/Dokumente usw/Master/Reddy Lab/1_thesis/3_code/4_DB project/PlatypusDB_admin/R/VDJ_network.R")
source("C:/Dokumente usw/Master/Reddy Lab/1_thesis/3_code/4_DB project/PlatypusDB_admin/R/VGM_expanded_clones.R")
source("C:/Dokumente usw/Master/Reddy Lab/1_thesis/3_code/4_DB project/PlatypusDB_admin/R/VGM_expanded_clones.R")
source("C:/Dokumente usw/Master/Reddy Lab/1_thesis/3_code/4_DB project/PlatypusDB_admin/R/VGM_expanded_clones.R")
source("C:/Dokumente usw/Master/Reddy Lab/1_thesis/3_code/4_DB project/PlatypusDB_admin/R/VGM_expanded_clones.R")
source("C:/Dokumente usw/Master/Reddy Lab/1_thesis/3_code/4_DB project/PlatypusDB_admin/R/VGM_expanded_clones.R")
source("C:/Dokumente usw/Master/Reddy Lab/1_thesis/3_code/4_DB project/PlatypusDB_admin/R/VGM_expanded_clones.R")
library(stringr)
#get all functions of the package into workspace
source_code_dir <- "C:/Dokumente usw/Master/Reddy Lab/1_thesis/3_code/4_DB project/PlatypusDB_admin/R" #dont hate me for my file organisation, github placed the repository there
file_path_vec <- list.files(source_code_dir, full.names = T)
for(f_path in file_path_vec){
#print(f_path)
tryCatch({source(f_path)}, error = function(e){e
})
}
#deparse all functions i.e. get a list of character vectors where each element is a line of a function
c <- list()
n <- 1
for (i in ls()) {
print(i)
a <- get(i)
c[[n]] <- deparse(a)
names(c)[n] <- i
n <- n+1
}
#search for the patterns which devtools:check complained about. In this case:
#Error: Dependency package(s) 'SeuratObjects','ggplot','stingr' not available.
for(i in 1:length(c)){
for(j in 1:length(c[[i]])){
if(stringr::str_detect(c[[i]][j], "class(")){print(paste0(names(c)[i], " line ", c[[i]][j]))}
}
}
#search for the patterns which devtools:check complained about. In this case:
#Error: Dependency package(s) 'SeuratObjects','ggplot','stingr' not available.
for(i in 1:length(c)){
for(j in 1:length(c[[i]])){
if(stringr::str_detect(c[[i]][j], "class\\(")){print(paste0(names(c)[i], " line ", c[[i]][j]))}
}
}
source("C:/Dokumente usw/Master/Reddy Lab/1_thesis/3_code/4_DB project/PlatypusDB_admin/R/PlatypusDB_find_CDR3s.R")
source("C:/Dokumente usw/Master/Reddy Lab/1_thesis/3_code/4_DB project/PlatypusDB_admin/R/VDJ_call_MIXCR.R")
source("C:/Dokumente usw/Master/Reddy Lab/1_thesis/3_code/4_DB project/PlatypusDB_admin/R/VGM_integrate.R")
source("C:/Dokumente usw/Master/Reddy Lab/1_thesis/3_code/4_DB project/PlatypusDB_admin/R/GEX_coexpression_coefficient.R")
install.packages("Platypus_3.3.6.tar.gz", repos = NULL, type="source")
View(Platypus::VDJ_GEX_matrix)
library(Seurat)
#get all functions of the package into workspace
source_code_dir <- "C:/Users/vickr/Documents/GitHub/Platypus" #dont hate me for my file organisation, github placed the repository there
#VK 23-6-21
#This is for detecting errors in the function calling. i.e. if a package is spelled wrong e.g. ggplod2::aes
library(stringr)
file_path_vec <- list.files(source_code_dir, full.names = T)
for(f_path in file_path_vec){
#print(f_path)
tryCatch({source(f_path)}, error = function(e){e
})
}
#get all functions of the package into workspace
source_code_dir <- "C:/Users/vickr/Documents/GitHub/Platypus/R" #dont hate me for my file organisation, github placed the repository there
file_path_vec <- list.files(source_code_dir, full.names = T)
for(f_path in file_path_vec){
#print(f_path)
tryCatch({source(f_path)}, error = function(e){e
})
}
#deparse all functions i.e. get a list of character vectors where each element is a line of a function
c <- list()
n <- 1
for (i in ls()) {
print(i)
a <- get(i)
c[[n]] <- deparse(a)
names(c)[n] <- i
n <- n+1
}
devtools::install_github("https://github.com/alexyermanos/Platypus", lib = "/home/INIM/victor.kreiner/miniconda3/envs/csf_project/lib/R/library/", dependencies = F, upgrade = F)
write.table(data.frame("a" = 1,2), file = "test.csv", quote=FALSE, sep="\t", row.names=FALSE, col.names = c("cell", "cell type"))
write.table(data.frame("a" = 1,2), file = "test2.csv", quote=FALSE, sep="\\t", row.names=FALSE, col.names = c("cell", "cell type"))
write.table(data.frame("a" = 1,2), file = "test2.csv", quote=FALSE, sep="\\t", row.names=FALSE, col.names = c("cell", "cell type"))
getwd(
)
stringi::stri_enc_mark(x)
stringi::stri_enc_mark("a")
stringi::stri_enc_mark("Ã„")
library(stringr)
#get all functions of the package into workspace
source_code_dir <- "C:/Users/vickr/Documents/GitHub/Platypus/R" #dont hate me for my file organisation, github placed the repository there
file_path_vec <- list.files(source_code_dir, full.names = T)
for(f_path in file_path_vec){
#print(f_path)
tryCatch({source(f_path)}, error = function(e){e
})
}
#deparse all functions i.e. get a list of character vectors where each element is a line of a function
c <- list()
n <- 1
for (i in ls()) {
print(i)
a <- get(i)
c[[n]] <- deparse(a)
names(c)[n] <- i
n <- n+1
}
for(i in 1:length(c)){
for(j in 1:length(c[[i]])){
if(stringi::stri_enc_mark(c[[i]][j]) != "ASCII"){print(paste0(names(c)[i], " line ", c[[i]][j]))}
}
}
methods::setClass('AntibodyForests',
slots = c(
tree = 'ANY', #in
sample_id = 'ANY', #in
clonotype_id = 'ANY', #in
plot_ready = 'ANY', #f call
heterogeneous = 'ANY', #f call
reactivity = 'ANY', #f call
dynamic = 'ANY', #f call
metrics = 'ANY', #f call
sequences = 'ANY', #in
germline_sequence = 'ANY', #to add
barcodes = 'ANY', #in
node_features = 'ANY', #in
edge_list = 'ANY', #no/f call
gex_list = 'ANY', #f call
paths = 'ANY', #f call
node_transitions = 'ANY', #f call
network_algorithm = 'ANY', #in
adjacency_matrix = 'ANY', #no/f call
phylo = 'ANY',
feature_names = 'ANY',
permuted_transitions = 'ANY' #f call
)
)
. <- 1
.
`Cells per feature` <- NULL
`Cells per feature`
%<+%
#This is for detecting errors in the function calling. i.e. if a package is spelled wrong e.g. ggplod2::aes
library(stringr)
#get all functions of the package into workspace
source_code_dir <- "C:/Users/vickr/Documents/GitHub/Platypus/R" #dont hate me for my file organisation, github placed the repository there
file_path_vec <- list.files(source_code_dir, full.names = T)
for(f_path in file_path_vec){
#print(f_path)
tryCatch({source(f_path)}, error = function(e){e
})
}
#deparse all functions i.e. get a list of character vectors where each element is a line of a function
c <- list()
n <- 1
for (i in ls()) {
print(i)
a <- get(i)
c[[n]] <- deparse(a)
names(c)[n] <- i
n <- n+1
}
#search for the patterns which devtools:check complained about. In this case:
#Error: Dependency package(s) 'SeuratObjects','ggplot','stingr' not available.
for(i in 1:length(c)){
for(j in 1:length(c[[i]])){
if(stringr::str_detect(c[[i]][j], "dot_plot(")){print(paste0(names(c)[i], " line ", c[[i]][j]))}
}
}
#search for the patterns which devtools:check complained about. In this case:
#Error: Dependency package(s) 'SeuratObjects','ggplot','stingr' not available.
for(i in 1:length(c)){
for(j in 1:length(c[[i]])){
if(stringr::str_detect(c[[i]][j], "dot_plot\\(")){print(paste0(names(c)[i], " line ", c[[i]][j]))}
}
}
if(stringr::str_detect(c[[i]][j], "dot_plot")){print(paste0(names(c)[i], " line ", c[[i]][j]))}
#search for the patterns which devtools:check complained about. In this case:
#Error: Dependency package(s) 'SeuratObjects','ggplot','stingr' not available.
for(i in 1:length(c)){
for(j in 1:length(c[[i]])){
if(stringr::str_detect(c[[i]][j], "dot_plot")){print(paste0(names(c)[i], " line ", c[[i]][j]))}
}
}
#search for the patterns which devtools:check complained about. In this case:
#Error: Dependency package(s) 'SeuratObjects','ggplot','stingr' not available.
for(i in 1:length(c)){
for(j in 1:length(c[[i]])){
if(stringr::str_detect(c[[i]][j], "requireNam")){print(paste0(names(c)[i], " line ", c[[i]][j]))}
}
}
#VK 23-6-21
#This is for detecting errors in the function calling. i.e. if a package is spelled wrong e.g. ggplod2::aes
library(stringr)
#get all functions of the package into workspace
source_code_dir <- "C:/Users/vickr/Documents/GitHub/Platypus/R" #dont hate me for my file organisation, github placed the repository there
file_path_vec <- list.files(source_code_dir, full.names = T)
for(f_path in file_path_vec){
#print(f_path)
tryCatch({source(f_path)}, error = function(e){e
})
}
#deparse all functions i.e. get a list of character vectors where each element is a line of a function
c <- list()
n <- 1
for (i in ls()) {
print(i)
a <- get(i)
c[[n]] <- deparse(a)
names(c)[n] <- i
n <- n+1
}
#search for the patterns which devtools:check complained about. In this case:
#Error: Dependency package(s) 'SeuratObjects','ggplot','stingr' not available.
for(i in 1:length(c)){
for(j in 1:length(c[[i]])){
if(stringr::str_detect(c[[i]][j], "Calculate the")){print(paste0(names(c)[i], " line ", c[[i]][j]))}
}
}
#search for the patterns which devtools:check complained about. In this case:
#Error: Dependency package(s) 'SeuratObjects','ggplot','stingr' not available.
for(i in 1:length(c)){
for(j in 1:length(c[[i]])){
if(stringr::str_detect(c[[i]][j], "Calculate  the")){print(paste0(names(c)[i], " line ", c[[i]][j]))}
}
}
#search for the patterns which devtools:check complained about. In this case:
#Error: Dependency package(s) 'SeuratObjects','ggplot','stingr' not available.
for(i in 1:length(c)){
for(j in 1:length(c[[i]])){
if(stringr::str_detect(c[[i]][j], "Calculate")){print(paste0(names(c)[i], " line ", c[[i]][j]))}
}
}
#search for the patterns which devtools:check complained about. In this case:
#Error: Dependency package(s) 'SeuratObjects','ggplot','stingr' not available.
for(i in 1:length(c)){
for(j in 1:length(c[[i]])){
if(stringr::str_detect(c[[i]][j], "Calculate ")){print(paste0(names(c)[i], " line ", c[[i]][j]))}
}
}
#VK 23-6-21
#This is for detecting errors in the function calling. i.e. if a package is spelled wrong e.g. ggplod2::aes
library(stringr)
#get all functions of the package into workspace
source_code_dir <- "C:/Users/vickr/Documents/GitHub/Platypus/R" #dont hate me for my file organisation, github placed the repository there
file_path_vec <- list.files(source_code_dir, full.names = T)
for(f_path in file_path_vec){
#print(f_path)
tryCatch({source(f_path)}, error = function(e){e
})
}
#deparse all functions i.e. get a list of character vectors where each element is a line of a function
c <- list()
n <- 1
for (i in ls()) {
print(i)
a <- get(i)
c[[n]] <- deparse(a)
names(c)[n] <- i
n <- n+1
}
#search for the patterns which devtools:check complained about. In this case:
#Error: Dependency package(s) 'SeuratObjects','ggplot','stingr' not available.
for(i in 1:length(c)){
for(j in 1:length(c[[i]])){
if(stringr::str_detect(c[[i]][j], "get_aes_var")){print(paste0(names(c)[i], " line ", c[[i]][j]))}
}
}
library(ggtree)
update.packages("ggtree")
update.packages("rvcheck")
install.packages("rvcheck")
install.packages("rvcheck")
install.packages("rvcheck")
library(ggtree)
install.packages("devtools")
install_version("Roxygen2", version = "7.1.1")
devtools::install_version("Roxygen2", version = "7.1.1")
devtools::install_version("roxygen2", version = "7.1.1")
BiocManager::install("BiocGenerics")
install.packages("seqinr")
BiocManager::install("Biostrings")
install.packages("useful")
install.packages("utils")
BiocManager::install("AnnotationsDbi")
install.packages("AnnotationsDbi")
install.packages("circlize")
install.packages("doParallel")
install.packages("fda.usc")
install.packages("fgsea")
BiocManager::install("fgsea")
install.packages("ggalluvial")
install.packages("ggseqlogo")
install.packages("harmony")
install.packages("limma")
BiocManager::install("limma")
BiocManager::install("keras")
BiocManager::install("msigdbr")
BiocManager::install("org.Hs.eg.db")
BiocManager::install("org.Mm.eg.db")
install.packages("pheatmap")
install.packages("phytools")
BiocManager::install("SummarizedExperiment")
install.packages("stringdist")
install.packages("vegan")
a <- 1
inherits(a)
inherits(a, class(b))
#This is for detecting errors in the function calling. i.e. if a package is spelled wrong e.g. ggplod2::aes
library(stringr)
#get all functions of the package into workspace
source_code_dir <- "C:/Users/vickr/Documents/GitHub/Platypus/R" #dont hate me for my file organisation, github placed the repository there
file_path_vec <- list.files(source_code_dir, full.names = T)
for(f_path in file_path_vec){
#print(f_path)
tryCatch({source(f_path)}, error = function(e){e
})
}
#deparse all functions i.e. get a list of character vectors where each element is a line of a function
c <- list()
n <- 1
for (i in ls()) {
print(i)
a <- get(i)
c[[n]] <- deparse(a)
names(c)[n] <- i
n <- n+1
}
#search for the patterns which devtools:check complained about. In this case:
#Error: Dependency package(s) 'SeuratObjects','ggplot','stingr' not available.
for(i in 1:length(c)){
for(j in 1:length(c[[i]])){
if(stringr::str_detect(c[[i]][j], "library")){print(paste0(names(c)[i], " line ", c[[i]][j]))}
}
}
#search for the patterns which devtools:check complained about. In this case:
#Error: Dependency package(s) 'SeuratObjects','ggplot','stingr' not available.
for(i in 1:length(c)){
for(j in 1:length(c[[i]])){
if(stringr::str_detect(c[[i]][j], "require")){print(paste0(names(c)[i], " line ", c[[i]][j]))}
}
}
#VK 23-6-21
#This is for detecting errors in the function calling. i.e. if a package is spelled wrong e.g. ggplod2::aes
library(stringr)
#get all functions of the package into workspace
source_code_dir <- "C:/Users/vickr/Documents/GitHub/Platypus/R" #dont hate me for my file organisation, github placed the repository there
file_path_vec <- list.files(source_code_dir, full.names = T)
for(f_path in file_path_vec){
#print(f_path)
tryCatch({source(f_path)}, error = function(e){e
})
}
#deparse all functions i.e. get a list of character vectors where each element is a line of a function
c <- list()
n <- 1
for (i in ls()) {
print(i)
a <- get(i)
c[[n]] <- deparse(a)
names(c)[n] <- i
n <- n+1
}
#search for the patterns which devtools:check complained about. In this case:
#Error: Dependency package(s) 'SeuratObjects','ggplot','stingr' not available.
for(i in 1:length(c)){
for(j in 1:length(c[[i]])){
if(stringr::str_detect(c[[i]][j], "require")){print(paste0(names(c)[i], " line ", c[[i]][j]))}
}
}
#VK 23-6-21
#This is for detecting errors in the function calling. i.e. if a package is spelled wrong e.g. ggplod2::aes
library(stringr)
#get all functions of the package into workspace
source_code_dir <- "C:/Users/vickr/Documents/GitHub/Platypus/R" #dont hate me for my file organisation, github placed the repository there
file_path_vec <- list.files(source_code_dir, full.names = T)
for(f_path in file_path_vec){
#print(f_path)
tryCatch({source(f_path)}, error = function(e){e
})
}
#deparse all functions i.e. get a list of character vectors where each element is a line of a function
c <- list()
n <- 1
for (i in ls()) {
print(i)
a <- get(i)
c[[n]] <- deparse(a)
names(c)[n] <- i
n <- n+1
}
#search for the patterns which devtools:check complained about. In this case:
#Error: Dependency package(s) 'SeuratObjects','ggplot','stingr' not available.
for(i in 1:length(c)){
for(j in 1:length(c[[i]])){
if(stringr::str_detect(c[[i]][j], "loadName")){print(paste0(names(c)[i], " line ", c[[i]][j]))}
}
}
#search for the patterns which devtools:check complained about. In this case:
#Error: Dependency package(s) 'SeuratObjects','ggplot','stingr' not available.
for(i in 1:length(c)){
for(j in 1:length(c[[i]])){
if(stringr::str_detect(c[[i]][j], "requireName")){print(paste0(names(c)[i], " line ", c[[i]][j]))}
}
}
#search for the patterns which devtools:check complained about. In this case:
#Error: Dependency package(s) 'SeuratObjects','ggplot','stingr' not available.
for(i in 1:length(c)){
for(j in 1:length(c[[i]])){
if(stringr::str_detect(c[[i]][j], "ape::as.")){print(paste0(names(c)[i], " line ", c[[i]][j]))}
}
}
#search for the patterns which devtools:check complained about. In this case:
#Error: Dependency package(s) 'SeuratObjects','ggplot','stingr' not available.
for(i in 1:length(c)){
for(j in 1:length(c[[i]])){
if(stringr::str_detect(c[[i]][j], "ape::as.dna")){print(paste0(names(c)[i], " line ", c[[i]][j]))}
}
}
#search for the patterns which devtools:check complained about. In this case:
#Error: Dependency package(s) 'SeuratObjects','ggplot','stingr' not available.
for(i in 1:length(c)){
for(j in 1:length(c[[i]])){
if(stringr::str_detect(c[[i]][j], "ape::fastme.os")){print(paste0(names(c)[i], " line ", c[[i]][j]))}
}
}
devtools::run_examples()
DEGs <- GEX_DEgenes(GEX = Platypus::small_vgm[[2]],min.pct = .25,
#' group1 = "s1",group2 = "s2", return.plot = "volcano")
)
DEGs <- GEX_DEgenes(GEX = Platypus::small_vgm[[2]],min.pct = .25,
group1 = "s1",group2 = "s2", return.plot = "volcano")
DEGs[[1]]
DEGs[[2]]
DEGs <- GEX_DEgenes(GEX = Platypus::small_vgm[[2]],min.pct = .25,
group1 = "s1",group2 = "s2", return.plot = "volcano", up.genes = F, down.genes = F)
DEGs[[2]]
plot(DEGs[[2]])
gridExtra::grid.arrange(DEGs[[2]])
PlatypusDB_fetch("yermanos2021a//GEXmatrix", load.to.enviroment = T)
DEGs <- GEX_DEgenes(GEX = yermanos2021a_GEXmatrix[[2]],min.pct = .25,
group1 = "s1",group2 = "s2", return.plot = "volcano", up.genes = F, down.genes = F)
DEGs <- GEX_DEgenes(GEX = yermanos2021a_GEXmatrix[[2]],min.pct = .25,
group1 = "s1",group2 = "s2", return.plot = "volcano", up.genes = F, down.genes = F)
DEGs <- GEX_DEgenes(GEX = yermanos2021a__GEXmatrix[[2]],min.pct = .25,
group1 = "s1",group2 = "s2", return.plot = "volcano", up.genes = F, down.genes = F)
DEGs[[2]]
DEGs[[1]]
source("~/GitHub/Platypus/R/GEX_DEgenes.R")
DEGs <- GEX_DEgenes(GEX = yermanos2021a__GEXmatrix[[2]],min.pct = .25,
group1 = "s1",group2 = "s2", return.plot = "volcano", up.genes = F, down.genes = F)
DEGs[[2]]
DEGs <- GEX_DEgenes(GEX = yermanos2021a__GEXmatrix[[2]],min.pct = .25,
group1 = "s1",group2 = "s2", return.plot = "heatmap", up.genes = F, down.genes = F)
DEGs[[Â²]]
DEGs[[2]]]
DEGs[[2]]
DEGs <- GEX_DEgenes(GEX = yermanos2021a__GEXmatrix[[2]],min.pct = .25,
group1 = "s1",group2 = "s2", return.plot = "volcano", up.genes = 1, down.genes = 1)
DEGs[[2]]
ggplot2::ggsave(DEGs[[2]], file = "test.png", width = 30, height = 30)
getwd()
source("~/GitHub/Platypus/R/GEX_DEgenes.R")
devtools::run_examples()
